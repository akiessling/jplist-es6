{"version":3,"file":"jplist.min.js","mappings":"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","sources":["webpack://jplist-es6/./src/1.2.0/actions/filter/filter.action.js","webpack://jplist-es6/./src/1.2.0/actions/pagination/pagination.action.js","webpack://jplist-es6/./src/1.2.0/actions/sort/sort.action.js","webpack://jplist-es6/./src/1.2.0/content/content-manager.js","webpack://jplist-es6/./src/1.2.0/controls/base/controls/base.control.js","webpack://jplist-es6/./src/1.2.0/controls/base/controls/dropdown/base-dropdown.control.js","webpack://jplist-es6/./src/1.2.0/controls/base/controls/filter/base-path-filter.control.js","webpack://jplist-es6/./src/1.2.0/controls/base/controls/filter/base-range-filter.control.js","webpack://jplist-es6/./src/1.2.0/controls/base/controls/filter/base-text-filter.control.js","webpack://jplist-es6/./src/1.2.0/controls/base/controls/pagination/base-pagination.control.js","webpack://jplist-es6/./src/1.2.0/controls/base/controls/slider/base-slider.control.js","webpack://jplist-es6/./src/1.2.0/controls/base/controls/sort/base-sort.control.js","webpack://jplist-es6/./src/1.2.0/controls/base/groups/base-controls-group.js","webpack://jplist-es6/./src/1.2.0/controls/base/groups/filter/base-path-filter-controls-group.js","webpack://jplist-es6/./src/1.2.0/controls/base/groups/filter/base-range-filter-controls-group.js","webpack://jplist-es6/./src/1.2.0/controls/base/groups/filter/base-text-filter-controls-group.js","webpack://jplist-es6/./src/1.2.0/controls/base/groups/mixins/buttons.mixin.js","webpack://jplist-es6/./src/1.2.0/controls/base/groups/mixins/checkbox.mixin.js","webpack://jplist-es6/./src/1.2.0/controls/base/groups/mixins/radio-buttons.mixin.js","webpack://jplist-es6/./src/1.2.0/controls/base/groups/pagination/base-pagination-controls-group.js","webpack://jplist-es6/./src/1.2.0/controls/base/groups/sort/base-sort-controls-group.js","webpack://jplist-es6/./src/1.2.0/controls/counter/counter.control.js","webpack://jplist-es6/./src/1.2.0/controls/filter/path-filters/buttons-path-filter/buttons-path-filter.control.js","webpack://jplist-es6/./src/1.2.0/controls/filter/path-filters/checkbox-path-filter/checkbox-path-filter.control.js","webpack://jplist-es6/./src/1.2.0/controls/filter/path-filters/dropdown-filter/dropdown-filter.control.js","webpack://jplist-es6/./src/1.2.0/controls/filter/path-filters/radio-buttons-path-filter/radio-buttons-path-filter.control.js","webpack://jplist-es6/./src/1.2.0/controls/filter/path-filters/select-filter/select-filter.control.js","webpack://jplist-es6/./src/1.2.0/controls/filter/range-filters/buttons-range-filter/buttons-range-filter.control.js","webpack://jplist-es6/./src/1.2.0/controls/filter/range-filters/slider-range-filter/slider-range-filter.control.js","webpack://jplist-es6/./src/1.2.0/controls/filter/text-filters/buttons-text-filter/buttons-text-filter.control.js","webpack://jplist-es6/./src/1.2.0/controls/filter/text-filters/checkbox-text-filter/checkbox-text-filter.control.js","webpack://jplist-es6/./src/1.2.0/controls/filter/text-filters/radio-buttons-text-filter/radio-buttons-text-filter.control.js","webpack://jplist-es6/./src/1.2.0/controls/filter/text-filters/textbox-filter/textbox-filter.control.js","webpack://jplist-es6/./src/1.2.0/controls/layout/layout.control.js","webpack://jplist-es6/./src/1.2.0/controls/no-results/no-results.control.js","webpack://jplist-es6/./src/1.2.0/controls/pagination/pagination.control.js","webpack://jplist-es6/./src/1.2.0/controls/reset/reset.control.js","webpack://jplist-es6/./src/1.2.0/controls/sort/buttons-sort/buttons-sort.control.js","webpack://jplist-es6/./src/1.2.0/controls/sort/checkbox-sort/checkbox-sort.control.js","webpack://jplist-es6/./src/1.2.0/controls/sort/dropdown-sort/dropdown-sort.control.js","webpack://jplist-es6/./src/1.2.0/controls/sort/hidden-sort/hidden-sort.control.js","webpack://jplist-es6/./src/1.2.0/controls/sort/radio-buttons-sort/radio-buttons-sort.control.js","webpack://jplist-es6/./src/1.2.0/controls/sort/select-sort/select-sort.control.js","webpack://jplist-es6/./src/1.2.0/jplist.js","webpack://jplist-es6/./src/1.2.0/services/deep-links.service.js","webpack://jplist-es6/./src/1.2.0/services/storage.service.js","webpack://jplist-es6/webpack/bootstrap","webpack://jplist-es6/webpack/runtime/make namespace object","webpack://jplist-es6/./src/1.2.0/index.js"],"sourcesContent":["/**\n * filter action\n */\nclass FilterAction{\n\n    /**\n     * text filter\n     * this filter returns all items that contains the specified text in the given path\n     * @param {Array.<HTMLElement>} items\n     * @param {string} text\n     * @param {string=} path - any CSS selector or empty value meaning the whole element\n     * @param {string=} mode - contains (default), startsWith, endsWith, equal\n     * @param {string=} ignoreRegex - optional regex that defines what characters should be ignored\n     * @return {Array.<HTMLElement>} filtered items\n     */\n    static textFilter(items, text, path='', mode = 'contains', ignoreRegex = ''){\n\n        const filtered = [];\n\n        if(!items) return [];\n\n        if(path === 'default') return items;\n\n        const formattedText = text.replace(new RegExp(ignoreRegex, 'ig'), '').toLowerCase().trim();\n\n        for(let item of items){\n\n            const elements = path ? item.querySelectorAll(path) : [item];\n\n            if(!elements) continue;\n\n            let shouldBeAdded = false;\n\n            for(let el of elements){\n\n                const elText = el.textContent.replace(new RegExp(ignoreRegex, 'ig'), '').toLowerCase().trim();\n\n                switch(mode){\n\n                    case 'startsWith':{\n\n                        if(elText.startsWith(formattedText)){\n                            shouldBeAdded = true;\n                        }\n\n                        break;\n                    }\n\n                    case 'endsWith':{\n\n                        if(elText.endsWith(formattedText)){\n                            shouldBeAdded = true;\n                        }\n\n                        break;\n                    }\n\n                    case 'equal':{\n\n                        if(elText === formattedText){\n                            shouldBeAdded = true;\n                        }\n                        break;\n                    }\n\n                    default:{\n                        let strings = formattedText.split(' ');\n\n                        shouldBeAdded = strings.every(function (str) {\n                           return elText.indexOf(str) !== -1;\n                            }\n                        );\n\n                        break;\n                    }\n                }\n\n                if(shouldBeAdded) break;\n            }\n\n            if(shouldBeAdded){\n                filtered.push(item);\n            }\n        }\n\n        return filtered;\n    }\n\n    /**\n     * path filter\n     * only items with the given path are returned\n     * @param {Array.<HTMLElement>} items\n     * @param {string=} path - any CSS selector or empty value meaning the whole element\n     * @param {boolean} isInverted - if true, return all items that DON'T contain the specified path\n     * @return {Array.<HTMLElement>} filtered items\n     */\n    static pathFilter(items, path='', isInverted = false){\n\n        const filtered = [];\n\n        if(!items) return [];\n\n        if(path === 'default' || !path) return items;\n\n        for(let item of items){\n\n            const el = item.querySelector(path);\n\n            if(el && !isInverted || !el && isInverted){\n                filtered.push(item);\n            }\n        }\n\n        return filtered;\n    }\n\n    /**\n     * check if n is a number\n     * @param {*} n\n     * @returns {boolean}\n     */\n    static isNumeric(n)\n    {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n\n    /**\n     * range filter\n     * return only elements that satisfy the following condition:\n     * all numbers in the element's content are in the following range: min <= from <= (all numbers in the element) <= to <= max\n     * @param {Array.<HTMLElement>} items\n     * @param {string=} path - any CSS selector or empty value meaning the whole element\n     * @param {number} from\n     * @param {number} to\n     * @param {number=} min\n     * @param {number=} max\n     * @return {Array.<HTMLElement>} filtered items\n     */\n    static rangeFilter(items, path='', from, to, min = from, max = to){\n\n        const filtered = [];\n\n        if(!items) return [];\n\n        if(path === 'default') return items;\n\n        from = Math.max(from, min);\n        to = Math.min(to, max);\n\n        for(let item of items){\n\n            const itemElements = path ? item.querySelectorAll(path) : [item];\n\n            if(!itemElements) continue;\n\n            //find all numbers within the element\n            const numbers = [];\n\n            for(let el of itemElements){\n\n                const num = Number(el.textContent.trim().replace(/[^-0-9.]+/g,''));\n\n                if(!isNaN(num)){\n                    numbers.push(num);\n                }\n            }\n\n            if(numbers.length > 0){\n\n                //find max and min number of all found within the element numbers\n                const maxNumber = Math.max.apply(Math, numbers);\n                const minNumber = Math.min.apply(Math, numbers);\n\n                let shouldBeAdded = true;\n\n                if(FilterAction.isNumeric(from) && from > minNumber){\n                    shouldBeAdded = false;\n                }\n\n                if(FilterAction.isNumeric(to) && maxNumber > to){\n                    shouldBeAdded = false;\n                }\n\n                if(shouldBeAdded){\n                    filtered.push(item);\n                }\n            }\n        }\n\n        return filtered;\n    }\n}\n\nexport default FilterAction;","/**\n * pagination\n */\nclass PaginationAction{\n\n    /**\n     * Pagination\n     * @constructor\n     * @param {number} currentPage\n     * @param {number} itemsPerPage\n     * @param {number} itemsNumber\n     * @param {number} range\n     */\n    constructor(currentPage, itemsPerPage, itemsNumber, range){\n\n        this.itemsNumber = Number(itemsNumber) || 0;\n        this.itemsPerPage = Number.isInteger(itemsPerPage) ? Number(itemsPerPage) : this.itemsNumber;\n\n        if(this.itemsPerPage === 0){\n            this.itemsPerPage = itemsNumber;\n        }\n\n        this.pagesNumber = this.itemsPerPage === 0 ? 0 : Math.ceil(this.itemsNumber/this.itemsPerPage);\n\n        //validate current page\n        this.currentPage = Number(currentPage) || 0;\n\n        if(this.currentPage > this.pagesNumber - 1){\n            this.currentPage = 0;\n        }\n\n        this.start = this.currentPage * this.itemsPerPage;\n        this.end = this.start + this.itemsPerPage;\n\n        //validate the end\n        if(this.end > this.itemsNumber){\n            this.end = this.itemsNumber;\n        }\n\n        this.prevPage = this.currentPage <= 0 ? 0 : this.currentPage - 1;\n        this.nextPage = this.pagesNumber === 0 ? 0 : (this.currentPage >= this.pagesNumber - 1 ? this.pagesNumber - 1 : this.currentPage + 1);\n\n        this.range = Number(range) || 10;\n\n        const halfRange = Math.ceil((this.range - 1) / 2);\n        this.rangeStart = this.currentPage - halfRange;\n        this.rangeEnd = Math.min(this.rangeStart + this.range - 1, this.pagesNumber - 1);\n\n        if(this.rangeStart <= 0){\n            this.rangeStart = 0;\n            this.rangeEnd = Math.min(this.range - 1, this.pagesNumber - 1);\n        }\n\n        if(this.rangeEnd >= this.pagesNumber - 1){\n            this.rangeStart = Math.max(this.pagesNumber - this.range, 0);\n            this.rangeEnd = this.pagesNumber - 1;\n        }\n    }\n}\n\nexport default PaginationAction;","/**\n * sort action\n */\nclass SortAction{\n\n    /**\n     * general multiple sort\n     * @param {Array.<HTMLElement>} items\n     * @param {Array.<{path: string, dataType: text|number|datetime, order: asc|desc, ignoreRegex: string, dateTimeFormat: string}>} options\n     * if path = 'default' - the original sort should be kept\n     * @return {Array.<HTMLElement>} sorted items\n     */\n    static sort(items, options){\n\n        if(!options || options.length <= 0){\n\n            /**\n             * if no options - return to the default browser sort order\n             */\n            items.sort((item1, item2) => {\n                return SortAction.sortByIndex(item1, item2);\n            });\n\n            return items;\n        }\n\n        items.sort((item1, item2) => {\n\n            /**\n             * start recursive helper\n             */\n            return SortAction.sortHelper(item1, item2, options, 0);\n        });\n\n        return items;\n    }\n\n    /**\n     * recursive sort helper\n     * @param {HTMLElement} item1\n     * @param {HTMLElement} item2\n     * @param {Array.<Object>} options - structure: {path: string, dataType: text|number|datetime, order: asc|desc, ignoreRegex: string, dateTimeFormat: string}\n     * @param {number} optionsIndex\n     * @return {number} - 0 if equal, <0 if item1 < item2, >0 if item1 > item2\n     */\n    static sortHelper(item1, item2, options, optionsIndex){\n\n        if(!options || options.length <= 0 || optionsIndex >= options.length){\n            return 0;\n        }\n\n        let result = 0;\n\n        const option = options[optionsIndex];\n\n        if(option.path !== 'default'){\n\n            switch(option.dataType){\n\n                case 'number': {\n                    result = SortAction.sortNumbers(item1, item2, option.path, option.order);\n                    break;\n                }\n\n                case 'datetime': {\n                    result = SortAction.sortDateTime(item1, item2, option.path, option.order, option.dateTimeFormat);\n                    break;\n                }\n\n                default: {\n                    result = SortAction.sortText(item1, item2, option.path, option.order, option.ignoreRegex);\n                    break;\n                }\n            }\n        }\n        else{\n            result = SortAction.sortByIndex(item1, item2);\n        }\n\n        if(result === 0 && optionsIndex + 1 < options.length){\n\n            //get next result recursive\n            result = SortAction.sortHelper(item1, item2, options, optionsIndex + 1);\n        }\n\n        return result;\n    }\n\n    /**\n     * sort texts\n     * @param {HTMLElement} item1\n     * @param {HTMLElement} item2\n     * @param {string=} path - can be any CSS selector - https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Selectors;\n     * empty path means the whole element; path shouldn't have 'default' value\n     * @param {string=} order - asc or desc\n     * @param {string=} ignoreRegex - optional regex that defines charaters that should be ignored before the sorting\n     * @return {number} - 0 if equal, <0 if item1 < item2, >0 if item1 > item2\n     */\n    static sortText(item1, item2, path = '', order = 'asc', ignoreRegex = ''){\n\n        if(!item1 || !item2){\n            return 0;\n        }\n\n        //find elements with the content to sort\n        const el1 = path ? item1.querySelector(path) : item1;\n        const el2 = path ? item2.querySelector(path) : item2;\n\n        if(!el1 || !el2){\n            return 0;\n        }\n\n        let text1 = el1.textContent.trim().toLowerCase();\n        let text2 = el2.textContent.trim().toLowerCase();\n\n        if(ignoreRegex){\n\n            //regex expression that is used to remove irrelevant characters\n            const regexExpr = new RegExp(ignoreRegex, 'ig');\n            text1 = text1.replace(regexExpr, '').trim();\n            text2 = text2.replace(regexExpr, '').trim();\n        }\n\n        if(text1 === text2){\n            return 0;\n        }\n\n        if(!order){\n            order = 'asc';\n        }\n\n        //compare languages other than English\n        if(''.localeCompare){\n\n            if (order === 'asc') {\n                return text1.localeCompare(text2);\n            }\n            else {\n                return text2.localeCompare(text1);\n            }\n        }\n        else{\n            if (order === 'asc') {\n                return text1 > text2 ? 1 : -1;\n            }\n            else {\n                return text1 < text2 ? 1 : -1;\n            }\n        }\n    }\n\n    /**\n     * sort numbers\n     * @param {HTMLElement} item1\n     * @param {HTMLElement} item2\n     * @param {string=} path - can be any CSS selector - https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Selectors;\n     * empty path means the whole element; path shouldn't have 'default' value\n     * @param {string=} order - asc or desc\n     * @return {number} - 0 if equal, <0 if item1 < item2, >0 if item1 > item2\n     */\n    static sortNumbers(item1, item2, path = '', order = 'asc'){\n\n        if(!item1 || !item2){\n            return 0;\n        }\n\n        //find elements with the content to sort\n        const el1 = path ? item1.querySelector(path) : item1;\n        const el2 = path ? item2.querySelector(path) : item2;\n\n        if(!el1 || !el2){\n            return 0;\n        }\n\n        let number1 = el1.textContent.trim().toLowerCase();\n        let number2 = el2.textContent.trim().toLowerCase();\n\n        //remove other characters\n        number1 = parseFloat(number1.replace(/[^-0-9.]+/g,''));\n        number2 = parseFloat(number2.replace(/[^-0-9.]+/g,''));\n\n        if(isNaN(number1) || isNaN(number2)){\n\n            if(isNaN(number1) && isNaN(number2)){\n                return 0;\n            }\n            else {\n                return isNaN(number1) ? 1 : -1;\n            }\n        }\n\n        if(number1 === number2){\n            return 0;\n        }\n\n        if(!order){\n            order = 'asc';\n        }\n\n        if(order === 'asc'){\n            return number1 - number2;\n        }\n        else{\n            return number2 - number1;\n        }\n    }\n\n\n    /**\n     * sort by initial element index\n     * @param {HTMLElement} item1\n     * @param {HTMLElement} item2\n     * @return {number} - 0 if equal, <0 if item1 < item2, >0 if item1 > item2\n     */\n    static sortByIndex(item1, item2){\n\n        if(!item1 || !item2){\n            return 0;\n        }\n\n        let number1 = Number(item1.jplistIndex);\n        let number2 = Number(item2.jplistIndex);\n\n        if(isNaN(number1) || isNaN(number2)){\n            return 0;\n        }\n\n        return number1 - number2;\n    }\n\n    // ---------------- DATE TIME ------------------------\n\n    /**\n     * month name that can be used in date time strings\n     * from 0 for January to 11 for December\n     * @returns {Array.<Array.<string>>}\n     */\n    static get months() {\n\n        return [\n            ['january', 'jan', 'jan.'],\n            ['february', 'feb', 'feb.'],\n            ['march', 'mar', 'mar.'],\n            ['april', 'apr', 'apr.'],\n            ['may'],\n            ['june', 'jun.'],\n            ['july', 'jul', 'jul.'],\n            ['august', 'aug', 'aug.'],\n            ['september', 'sep', 'sep.'],\n            ['october', 'oct', 'oct.'],\n            ['november', 'nov', 'nov.'],\n            ['december', 'dec', 'dec.']\n        ];\n    }\n\n    /**\n     * sort datetime\n     * @param {HTMLElement} item1\n     * @param {HTMLElement} item2\n     * @param {string=} path - can be any CSS selector - https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Selectors;\n     * empty path means the whole element; path shouldn't have 'default' value;\n     * @param {string=} order - asc or desc\n     * @param {string=} dateTimeFormat - for example, {month}/{day}/{year}\n     * @return {number} - 0 if equal, <0 if item1 < item2, >0 if item1 > item2\n     */\n    static sortDateTime(item1, item2, path = '', order = 'asc', dateTimeFormat = ''){\n\n        if(!item1 || !item2){\n            return 0;\n        }\n\n        //find elements with the content to sort\n        const el1 = path ? item1.querySelector(path) : item1;\n        const el2 = path ? item2.querySelector(path) : item2;\n\n        if(!el1 || !el2){\n            return 0;\n        }\n\n        let datetime1 = el1.textContent.trim().toLowerCase();\n        let datetime2 = el2.textContent.trim().toLowerCase();\n\n        let date1;\n        let date2;\n\n        dateTimeFormat = dateTimeFormat.trim();\n\n        if(!dateTimeFormat){\n\n            date1 = new Date(Date.parse(datetime1));\n            date2 = new Date(Date.parse(datetime2));\n        }\n        else{\n            date1 = SortAction.getDateFromString(datetime1, dateTimeFormat);\n            date2 = SortAction.getDateFromString(datetime2, dateTimeFormat);\n        }\n\n        if(date1.getTime() === date2.getTime()){\n            return 0;\n        }\n\n        if(!order){\n            order = 'asc';\n        }\n\n        if(order === 'asc'){\n            return date1.getTime() > date2.getTime() ? 1 : -1;\n        }\n        else{\n            return date1.getTime() < date2.getTime() ? 1 : -1;\n        }\n    }\n\n    /**\n     * get date time from string that contains wildcards like {year}, {month}, {day}, {hour}, {min}, {sec}\n     * @param {string} dateTimeString - for example, 01/12/2017\n     * @param {string} dateTimeFormat - for example, {month}/{day}/{year}\n     * @return {Date}\n     */\n    static getDateFromString(dateTimeString, dateTimeFormat){\n\n        //remove special characters\n        dateTimeFormat = dateTimeFormat.replace(/\\./g, '\\\\.');\n        dateTimeFormat = dateTimeFormat.replace(/\\(/g, '\\\\(');\n        dateTimeFormat = dateTimeFormat.replace(/\\)/g, '\\\\)');\n        dateTimeFormat = dateTimeFormat.replace(/\\[/g, '\\\\[');\n        dateTimeFormat = dateTimeFormat.replace(/\\]/g, '\\\\]');\n\n        //get year\n        let year = SortAction.getDateWildcardValue(dateTimeFormat, '{year}', dateTimeString);\n        year = Number(year) || 1900;\n\n        //get day\n        let day = SortAction.getDateWildcardValue(dateTimeFormat, '{day}', dateTimeString);\n        day = Number(day) || 1;\n\n        //get month: integer value representing the month, beginning with 0 for January to 11 for December\n        let month = SortAction.getDateWildcardValue(dateTimeFormat, '{month}', dateTimeString);\n        month = SortAction.getMonthByWildcard(month);\n        if(month === -1){\n            month = 0;\n        }\n\n        //get hour: (0-23)\n        let hour = SortAction.getDateWildcardValue(dateTimeFormat, '{hour}', dateTimeString);\n        hour = Number(hour) || 0;\n\n        //get minute: (0-59)\n        let minute = SortAction.getDateWildcardValue(dateTimeFormat, '{min}', dateTimeString);\n        minute = Number(minute) || 0;\n\n        //get second: (0-59)\n        let second = SortAction.getDateWildcardValue(dateTimeFormat, '{sec}', dateTimeString);\n        second = Number(second) || 0;\n\n        return new Date(year, month, day, hour, minute, second);\n    }\n\n    /**\n     * get datetime format section/item\n     * @param {string} dateTimeFormat - for example, {month}/{day}/{year} or any other string with wildcards; dateTimeFormat should not contain special characters like . ( ) [ ]\n     * @param {string} wildcard - {year}|{month}|{day}|{hour}|{min}|{sec}\n     * @param {string} datetimeString - for example, 01/15/2017\n     * @return {string|null} - returns the specified wildcard value, for example 2017 for {year} wildcard\n     */\n    static getDateWildcardValue(dateTimeFormat, wildcard, datetimeString){\n\n        let result = null;\n\n        //replace the specified wildcard with the (.*)\n        //for example, for wildcard=year the string can be: '{month}/{day}/{year}' => '{month}/{day}/(.*)'\n        let replacedFormat = dateTimeFormat.replace(wildcard, '(.*)');\n\n        //replace all other wildcard with .*\n        //for example above it will be: '.*/.*/(.*)'\n        const regexValue = replacedFormat.replace(/{year}|{month}|{day}|{hour}|{min}|{sec}/g, '.*');\n\n        //for example, run '.*/.*/(.*)' regex on 01/15/2017\n        const regex = new RegExp(regexValue, 'g');\n        const match = regex.exec(datetimeString);\n\n        //we get the wildcard value from the given string: 2017 in the example above\n        if(match && match.length > 1){\n            result = match[1];\n        }\n\n        return result;\n    }\n\n    /**\n     * get month number by string\n     * @param {string} monthNumberOrName - month number or name from date time string\n     * @return {number} from 0 for January to 11 for December; -1 if not found;\n     */\n    static getMonthByWildcard(monthNumberOrName){\n\n        monthNumberOrName = monthNumberOrName ? monthNumberOrName.trim().toLowerCase() : '';\n\n        let monthIndex = Number(monthNumberOrName);\n\n        if(!isNaN(monthIndex)){\n\n            if(monthIndex - 1 < 0){\n                return -1;\n            }\n            else {\n                return monthIndex - 1;\n            }\n        }\n\n        //find month index by value\n        return SortAction.months.findIndex((monthAliasesArray) => {\n\n            return monthAliasesArray.find(monthAlias => {\n                return monthAlias.trim() === monthNumberOrName;\n            });\n        });\n    }\n}\n\nexport default SortAction;","import SortAction from '../actions/sort/sort.action';\nimport PaginationAction from '../actions/pagination/pagination.action';\nimport BaseControl from '../controls/base/controls/base.control';\nimport DeepLinksService from '../services/deep-links.service';\nimport StorageService from '../services/storage.service';\nimport FilterAction from '../actions/filter/filter.action';\n\n/**\n * content manager\n */\nclass ContentManager{\n\n    /**\n     * apply controls on the content groups\n     * @param {Object} settings\n     * @param {Map} controls - controls split by data-group and data-name: [groupName, [BaseControlsGroup1, BaseControlsGroup2, ...]]\n     * @param {Map} groups - [groupName, Array.<{root: HTMLElement, items: Array.<HTMLElement>] groups\n     * @param {string=} groupName - optional group name; if group name is empty or not provided -> refresh all groups\n     * @param {BaseControl|undefined=} target - the element that triggered the event\n     */\n    static apply(settings, controls, groups, groupName = '', target = undefined){\n\n        if(!controls || !groups) return;\n\n        const filters = [\n            {\n                options: 'pathFilterOptions',\n                name: 'pathFilter'\n            },\n            {\n                options: 'rangeFilterOptions',\n                name: 'rangeFilter'\n            },\n            {\n                options: 'textFilterOptions',\n                name: 'textFilter'\n            }\n        ];\n\n        //group structure is Array.<{root: HTMLElement, items: Array.<HTMLElement>}>\n        for(let [cGroupName, groupValueArr] of groups){\n\n            if((groupName && groupName === cGroupName) || !groupName){\n\n                //get controls of this group;\n                //received controls array [BaseControlsGroup1, BaseControlsGroup2, ...]\n                const baseControlsGroups = controls.get(cGroupName);\n\n                //collect sort, pagination and filter options from all controls with the same group name\n                const options = ContentManager.collectControlsOptions(baseControlsGroups);\n\n                //there can be more than one block of items with the same group name\n                //each itemsBlock has structure: {root: HTMLElement, items: Array.<HTMLElement>}\n                for(let itemsBlock of groupValueArr){\n\n                    let itemsNumber = itemsBlock.items.length;\n\n                    //hide all elements moving them to the document fragment\n                    let fragment = ContentManager.getItemsFragment(itemsBlock.items);\n\n                    if(options.sortOptions && options.sortOptions.length > 0) {\n\n                        //sort the items of the group using sort options of all controls\n                        SortAction.sort(itemsBlock.items, options.sortOptions);\n                        fragment = ContentManager.getItemsFragment(itemsBlock.items);\n                    }\n\n                    let filtered = itemsBlock.items;\n                    for(let filter of filters){\n\n                        //pathFilterOptions, rangeFilterOptions or textFilterOptions\n                        const filterName = filter.options;\n\n                        if(options[filterName]){\n\n                            const splitted = ContentManager.splitByLogic(options[filterName]);\n\n                            //apply \"AND\" filter\n                            filtered = ContentManager.handleFilter(filtered, splitted.and, 'and', filter.name);\n\n                            //apply \"OR\" filters\n                            for(let orOptionsGroupName in splitted.or){\n                                filtered = ContentManager.handleFilter(filtered, splitted.or[orOptionsGroupName], 'or', filter.name);\n                            }\n\n                            itemsNumber = filtered.length;\n                            fragment = ContentManager.getItemsFragment(filtered);\n                        }\n                    }\n\n                    if(options.paginationOptions){\n\n                        const paginationAction = new PaginationAction(\n                            options.paginationOptions.currentPage,\n                            options.paginationOptions.itemsPerPage,\n                            filtered.length,\n                            options.paginationOptions.range\n                        );\n\n                        //setPaginationOptions applies all computed properties of PaginationAction class to the latest pagination control\n                        if(baseControlsGroups.length > 0){\n\n                            for(let bcg of baseControlsGroups){\n                                if(bcg.setPaginationOptions){\n                                    bcg.setPaginationOptions(paginationAction);\n                                }\n                            }\n                        }\n\n                        const paginatedItems = filtered.slice(paginationAction.start, paginationAction.end);\n                        itemsNumber = paginatedItems.length;\n                        fragment = ContentManager.getItemsFragment(paginatedItems);\n                    }\n\n                    //return to HTML only relevant items\n                    itemsBlock.root.appendChild(fragment);\n\n                    //dispatch the event with different data about state of controls and items\n                    ContentManager.sendStateEvent(options, itemsNumber, baseControlsGroups, groups, filtered);\n                }\n\n                //if one of controls has data-jump attribute -> jump to the specified CSS selector or to the top\n                ContentManager.jump(baseControlsGroups, target);\n            }\n\n        }\n\n        if(settings.deepLinking) {\n\n            //update deep link if it's enabled\n            ContentManager.updateDeepLink(ContentManager.getDeepLink(controls, groups), settings.hashStart);\n        }\n        else{\n            if(settings.storage){\n\n                //update storage if it's enabled\n                StorageService.set(ContentManager.getDeepLink(controls, groups), settings.storage, settings.storageName, settings.cookiesExpiration);\n            }\n        }\n    }\n\n    /**\n     * perform filter\n     * @param {object} option\n     * @param {Array.<object>} filtered\n     * @param {string} filterType - 'textFilter', 'rangeFilter' or 'pathFilter'\n     * @returns {Array.<object>}\n     */\n    static performFilter(option, filtered, filterType){\n\n        switch(filterType){\n\n            case 'textFilter' : {\n                return FilterAction.textFilter(\n                    filtered,\n                    option.text,\n                    option.path,\n                    option.mode,\n                    option.ignoreRegex);\n            }\n\n            case 'pathFilter' : {\n                return FilterAction.pathFilter(filtered,\n                    option.path,\n                    option.isInverted);\n            }\n\n            case 'rangeFilter' : {\n                return FilterAction.rangeFilter(filtered,\n                    option.path,\n                    option.from,\n                    option.to,\n                    option.min,\n                    option.max);\n            }\n        }\n\n        return filtered;\n    }\n\n    /**\n     * filter text / path / range\n     * @param {Array.<object>} filtered\n     * @param {Array.<object>} options\n     * @param {string} logic - 'or' / 'and'\n     * @param {string} filterType - 'textFilter', 'rangeFilter' or 'pathFilter'\n     * @returns {Array.<object>}\n     */\n    static handleFilter(filtered, options, logic, filterType){\n\n        if(options.length <= 0) return filtered;\n\n        if(logic === 'and'){\n            for(let option of options){\n                filtered = ContentManager.performFilter(option, filtered, filterType);\n            }\n        }\n\n        if(logic === 'or'){\n\n            let orFiltered = new Set();\n\n            for(let option of options){\n\n                let temp = ContentManager.performFilter(option, filtered, filterType);\n\n                orFiltered = new Set([...orFiltered, ...temp]);\n            }\n\n            filtered = Array.from(orFiltered);\n        }\n\n        return filtered;\n    }\n\n    /**\n     * split array of options by \"OR\" / \"AND\" logic\n     * all options with \"AND\" logic organize 1 group, \"OR\" options can organize multiple groups\n     * @param {Array.<object>} options\n     * @return {object}, {and: [option1, option2, ...], or: {'name1': [option1, options, ...], 'name2': [option1, options, ...], ...}}\n     */\n    static splitByLogic(options){\n\n        const result = {\n            and: [],\n            or: {}\n        };\n\n        for(let option of options){\n\n            const orName = option.or;\n\n            if(!orName){\n                result.and.push(option);\n            }\n            else{\n                if(result.or[orName] === undefined){\n                    result.or[orName] = [option];\n                }\n                else{\n                    result.or[orName].push(option);\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * if one of controls has data-jump attribute -> jump to the specified CSS selector or to the top\n     * data-jump=\"any CSS selector or 'top' keyword\"\n     * examples: data-jump=\"header\"\n     *           data-jump=\".top-bar\"\n     *           data-jump=\"#main\"\n     *           data-jump=\"top\"\n     * @param {Array.<BaseControlsGroup>} baseControlsGroups - [BaseControlsGroup1, BaseControlsGroup2, ...]\n     * @param {BaseControl|undefined=} target - the element that triggered the event\n     * @history\n     *      - 21/08/2018 - fixed https://github.com/1rosehip/jplist-es6/issues/11\n     */\n    static jump(baseControlsGroups, target = undefined){\n\n        if(!target || !target.jump) return;\n\n        //if(!baseControlsGroups || baseControlsGroups.length <= 0) return;\n\n        //-1 means no scroll\n        let top = -1;\n\n        //top is always the upper ))\n        if(target.jump === 'top'){\n            top = 0;\n        }\n        else{\n            const jumpEl = document.querySelector(target.jump);\n\n            if(!jumpEl) return;\n\n            const jumpElRect = jumpEl.getBoundingClientRect();\n\n            //make sure element is not hidden or disconnected\n            if (!jumpEl.width && !jumpEl.height && !jumpEl.getClientRects().length) return;\n\n            const clientTop = document.clientTop || document.body.clientTop || 0;\n\n            if(top < 0){\n\n                //select the first jump path as the default value\n                top = jumpElRect.top + window.pageYOffset - clientTop;\n            }\n            else{\n                if(jumpElRect.top + window.pageYOffset - clientTop < top){\n                    top = jumpElRect.top + window.pageYOffset - clientTop;\n                }\n            }\n        }\n\n        if(top >= 0){\n            window.scroll(0, top);\n        }\n    }\n\n    /**\n     * send jPList general event with different data about state of controls and items\n     * @param {object} options\n     * @param {number} itemsNumber\n     * @param {BaseControlsGroup} baseControlsGroups\n     * @param {Map} groups - [groupName, Array.<{root: HTMLElement, items: Array.<HTMLElement>] groups\n     * @param {Array.<HTMLElement>} filtered\n     */\n    static sendStateEvent(options, itemsNumber, baseControlsGroups, groups, filtered){\n\n        if(!baseControlsGroups) return;\n\n        const stateEvent = new CustomEvent('jplist.state');\n\n        stateEvent.jplistState = {\n            options: options,\n            itemsNumber: itemsNumber,\n            groups: groups,\n            filtered: filtered\n        };\n\n        for(let baseControlsGroup of baseControlsGroups){\n\n            for(let control of baseControlsGroup.controls){\n\n                control.element.dispatchEvent(stateEvent);\n            }\n        }\n    }\n\n    /**\n     * collect sort, pagination and filter options from all controls with the same group name\n     * @param {Array.<BaseControlsGroup>} baseControlsGroups\n     * @return {object} sort, pagination and filter objects\n     */\n    static collectControlsOptions(baseControlsGroups){\n\n        const options = {\n\n            //there can be multiple sort options\n            sortOptions: [],\n\n            //there should be only one pagination options object;\n            //in case of multiple -> get the latest\n            paginationOptions: null,\n\n            //there can be multiple filter options\n            textFilterOptions: [],\n            pathFilterOptions: [],\n            rangeFilterOptions: []\n        };\n\n        if(!baseControlsGroups) return options;\n\n        for(let baseControlsGroup of baseControlsGroups){\n\n            //get sort options only from sort controls\n            if(baseControlsGroup.getSortOptions) {\n\n                //add base control group sort options\n                options.sortOptions = options.sortOptions.concat(baseControlsGroup.getSortOptions());\n            }\n\n            //get text filter options only from text filter controls\n            if(baseControlsGroup.getTextFilterOptions) {\n\n                //add base control group sort options\n                options.textFilterOptions = options.textFilterOptions.concat(baseControlsGroup.getTextFilterOptions());\n            }\n\n            //get path filter options only from text filter controls\n            if(baseControlsGroup.getPathFilterOptions) {\n\n                //add base control group sort options\n                options.pathFilterOptions = options.pathFilterOptions.concat(baseControlsGroup.getPathFilterOptions());\n            }\n\n            //get range filter options only from range filter controls\n            if(baseControlsGroup.getRangeFilterOptions) {\n\n                //add base control group sort options\n                options.rangeFilterOptions = options.rangeFilterOptions.concat(baseControlsGroup.getRangeFilterOptions());\n            }\n\n            if(baseControlsGroup.getPaginationOptions) {\n                options.paginationOptions = baseControlsGroup.getPaginationOptions();\n            }\n        }\n\n        return options;\n    }\n\n    /**\n     * get document fragment with the specified items\n     * @param {Array.<HTMLElement>} items\n     * @return {DocumentFragment}\n     */\n    static getItemsFragment(items){\n\n        const fragment = document.createDocumentFragment();\n\n        for(let item of items){\n            fragment.appendChild(item);\n        }\n\n        return fragment;\n    }\n\n    /**\n     * update deep link -> replace it in URL\n     * @param {string} deepLink\n     * @param {string} hashStart\n     */\n    static updateDeepLink(deepLink, hashStart = '#'){\n\n        let hashStr = deepLink.replace(hashStart, '').trim();\n\n        if(hashStr === ''){\n            hashStr = hashStart;\n        }\n        else{\n            hashStr = hashStart + hashStr;\n        }\n\n        if(window.location.hash !== hashStr){\n\n            const index = window.location.href.indexOf(hashStart);\n            let href;\n\n            if(index === -1){\n                href = window.location.href + hashStr;\n            }\n            else{\n                href = window.location.href.substring(0, index) + hashStr;\n            }\n\n            if('replaceState' in window.history){\n                window.history.replaceState('', '', href);\n            }\n            else{\n                window.location.replace(href);\n            }\n        }\n    }\n\n    /**\n     * update deep link URL according to the current controls states\n     * @return {string} deep link\n     */\n    static getDeepLink(controls, groups){\n\n        let deeplink = [];\n\n        //group structure is Array.<{root: HTMLElement, items: Array.<HTMLElement>}>\n        for(let cGroupName of groups.keys()){\n\n            //get controls of this group;\n            //received controls array [BaseControlsGroup1, BaseControlsGroup2, ...]\n            const baseControlsGroups = controls.get(cGroupName);\n\n            const deepLinkParts = [];\n            for(let baseControlsGroup of baseControlsGroups){\n\n                const dl = baseControlsGroup.getDeepLink();\n\n                if(dl){\n                    deepLinkParts.push(dl);\n                }\n            }\n\n            if(deepLinkParts.length > 0){\n                deeplink.push('group=' + cGroupName);\n                deeplink = deeplink.concat(deepLinkParts);\n            }\n        }\n\n        return deeplink.join('&');\n    }\n\n    /**\n     * find all groups of elements that should be sorted, filtered, etc.\n     * each group defined by data-jplist-group attribute;\n     * each element in the group defined by data-jplist-item attribute;\n     * @param {HTMLCollection} groups\n     * @return {Map} Map[groupName, Array.<{root: HTMLElement, items: Array.<HTMLElement>] groups\n     */\n    static findGroups(groups){\n\n        const groupsMap = new Map();\n\n        if(!groups){\n            return groupsMap;\n        }\n\n        //get all items with data attribute data-jplist-group\n        const groupElements = [...groups];\n\n        for(let groupElement of groupElements){\n\n            const groupName = groupElement.getAttribute('data-jplist-group');\n\n            let groupValue = [];\n\n            if(groupsMap.has(groupName)){\n                groupValue = groupsMap.get(groupName);\n            }\n\n            groupValue.push({\n\n                /**\n                 * the root element of the group\n                 */\n                root: groupElement,\n\n                /**\n                 * all group elements\n                 */\n                items: [...groupElement.querySelectorAll('[data-jplist-item]')],\n\n                /**\n                 * this fragment used as a container for invisible items\n                 */\n                fragment: document.createDocumentFragment()\n            });\n\n            groupsMap.set(groupName, groupValue);\n        }\n\n        return groupsMap;\n    }\n\n    /**\n     * find all controls defined on page by data-jplist-control attribute;\n     * control classes should be registered in window.jplist.controlTypes before using this method:\n     * window.jplist.controlTypes = new Map([\n     *      ['hidden-sort', HiddenSortControl],\n     *      ...\n     * ]);\n     * @param {HTMLElement} root\n     * @return {Array.<BaseControl>}\n     */\n    static findControls(root){\n\n        if(!root) return [];\n\n        const controls = [];\n\n        //find all control\n        const elements = root.querySelectorAll('[data-jplist-control]');\n\n        if(elements) {\n\n            for(let element of elements){\n\n                const controlType = element.getAttribute('data-jplist-control');\n\n                if(!controlType) continue;\n\n                const controlInstance = new BaseControl(element);\n                controls.push(controlInstance);\n            }\n        }\n\n        return controls;\n    }\n\n    /**\n     * split control by their data-group property\n     * @param {Array.<BaseControl>} controls\n     * @return {Map} [[groupName, controls array], [...], ...]\n     */\n    static findControlGroups(controls){\n\n        const map = new Map();\n\n        if(controls) {\n\n            for (let control of controls) {\n\n                let arr = [];\n\n                if (map.has(control.group)) {\n                    arr = map.get(control.group);\n                }\n\n                arr.push(control);\n\n                map.set(control.group, arr);\n            }\n        }\n\n        return map;\n    }\n\n    /**\n     * find controls with the same name\n     * @param {object} settings\n     * @param {Array.<BaseControl>} controls\n     * @return {Map} [[name, BaseControlsGroup], [...]]\n     */\n    static findSameNameControls(settings, controls){\n\n        const map = new Map();\n\n        if(controls){\n\n            let deepLinkParams = null;\n\n            if(settings.deepLinking){\n                deepLinkParams = DeepLinksService.getUrlParams(window.location.hash, settings.hashStart);\n            }\n            else{\n                if(settings.storage){\n\n                    const deepLinkSavedInStorage = StorageService.get(settings.storage, settings.storageName);\n                    deepLinkParams = DeepLinksService.getUrlParams(deepLinkSavedInStorage, '');\n                }\n            }\n\n            for(let control of controls){\n\n                //control with not defined type should be ignored\n                if(!control.type || !window.jplist.controlTypes.has(control.type)) continue;\n\n                //check if data-type class defined in window.jplist.controlTypes;\n                //it should be defined like this:\n                //window.jplist.controlTypes = window.jplist.controlTypes || new Map([\n                //    ['hidden-sort', HiddenSortControl],\n                //    ...\n                //]);\n                const controlClass = window.jplist.controlTypes.get(control.type);\n\n                if(controlClass){\n\n                    let controlGroup = null;\n\n                    if (map.has(control.name)) {\n                        controlGroup = map.get(control.name);\n                    }\n                    else{\n                        controlGroup = new controlClass(control.group, control.name, [], deepLinkParams);\n                    }\n\n                    controlGroup.addControl(control);\n\n                    map.set(control.name, controlGroup);\n                }\n            }\n        }\n\n        return map;\n    }\n\n    /**\n     * initialize controls and split them by group and name\n     * @param {object} settings\n     * @param {HTMLElement} root\n     * @return {Map} [groupName, [BaseControlsGroup1, BaseControlsGroup2, ...]]\n     */\n    static splitByGroupAndName(settings, root){\n\n        const res = new Map();\n\n        if(!root) return res;\n\n        //find all controls: received {Array.<BaseControl>}\n        const controls = ContentManager.findControls(root);\n\n        //split controls by their data-group attributes;\n        //the received structure is map: [[groupName, controls array], [...], ...]\n        const controlsByGroupNames = ContentManager.findControlGroups(controls);\n\n        for(let [groupName, groupControls] of controlsByGroupNames){\n\n            //received {Map} - [[name, BaseControlsGroup], [...]]\n            const sameNameControls = ContentManager.findSameNameControls(settings, groupControls);\n\n            let arr = [];\n\n            for(let baseControlsGroup of sameNameControls.values()){\n                arr.push(baseControlsGroup);\n            }\n\n            res.set(groupName, arr);\n        }\n\n        return res;\n    }\n}\n\nexport default ContentManager;","/**\n * jPList Base Control\n * Each jPList control should extend this base control.\n */\nclass BaseControl{\n\n    /**\n     * control type defined in data-jplist-control attribute;\n     * for example, data-jplist-control=\"hidden-sort\" has type='hidden-sort'\n     * @param {HTMLElement} element\n     */\n    constructor(element){\n\n        if(element) {\n\n            this.element = element;\n\n            /**\n             * element initial html\n             * @type {string}\n             */\n            this.element.initialHTML = element.outerHTML;\n\n            /**\n             * used to define appropriate class for the control\n             * @type {string} required\n             */\n            this.type = (element.getAttribute('data-jplist-control') || '').trim().toLowerCase();\n\n            /**\n             * used to define the elements group that is influenced by this control\n             * @type {string=} optional\n             */\n            this.group = (element.getAttribute('data-group') || '').trim().toLowerCase();\n\n            /**\n             * control name\n             * @type {string} optional\n             */\n            this.name = (element.getAttribute('data-name') || element.getAttribute('name') || 'default').trim();\n\n            /**\n             * deep link parameter name\n             * @type {string} optional\n             */\n            this.id = (element.getAttribute('data-id') || '').trim().toLowerCase();\n\n            /**\n             * jump to an element after the action;\n             * and CSS selector or \"top\" keyword\n             * @type {string} optional\n             */\n            this.jump = (element.getAttribute('data-jump') || '').trim();\n        }\n    }\n}\n\nexport default BaseControl;","import './base-dropdown.control.css';\n\n/**\n * base dropdown control\n */\nclass BaseDropdownControl{\n\n\n    /**\n     * control type defined in data-jplist-control attribute;\n     * for example, data-jplist-control=\"hidden-sort\" has type='hidden-sort'\n     * @param {HTMLElement} element\n     */\n    constructor(element){\n\n        if(element) {\n\n            this.element = element;\n\n            if(!this.element) return;\n\n            //dropdown panel elements defined by data-type=\"panel\" data attribute; can be multiple;\n            this.panels = this.element.querySelectorAll('[data-type=\"panel\"]');\n            this.element.openedClass = (this.element.getAttribute('data-opened-class') || 'jplist-dd-opened').trim();\n\n            //keep panels initial html\n            for(let panel of this.panels){\n                panel.initialContent = panel.innerHTML;\n                panel.element = element;\n            }\n\n            //dropdown content elements defined by data-type=\"content\" data attribute; can be multiple;\n            this.contents = this.element.querySelectorAll('[data-type=\"content\"]');\n\n            //handle panels onclick event\n            this.handlePanelsClick();\n        }\n    }\n\n    /**\n     * handle panels onclick event\n     */\n    handlePanelsClick(){\n\n        if(!this.panels || this.panels.length <= 0) return;\n\n        for(let panel of this.panels){\n\n            /**\n             * on panel click\n             */\n            panel.addEventListener('click', e => {\n\n                //e.stopPropagation();\n\n                let atLeastOnePanelIsOpened = false;\n\n                for(let dropdownContent of this.contents){\n\n                    dropdownContent.classList.toggle(panel.element.openedClass);\n\n                    if(dropdownContent.classList.contains(panel.element.openedClass)){\n                        atLeastOnePanelIsOpened = true;\n                    }\n                }\n\n                if(atLeastOnePanelIsOpened){\n                    panel.classList.add(panel.element.openedClass);\n                    panel.element.classList.add(panel.element.openedClass);\n                }\n                else{\n                    panel.classList.remove(panel.element.openedClass);\n                    panel.element.classList.remove(panel.element.openedClass);\n                }\n            });\n        }\n\n        /**\n         * close dropdowns on body click\n         */\n        document.addEventListener('click', e => {\n\n            if (!this.element.contains(e.target)) { // or use: event.target.closest(selector) === null\n\n                this.close();\n            }\n        });\n    }\n\n    /**\n     * set panels content\n     * @param {string} content\n     */\n    setPanelsContent(content){\n\n        for(let panel of this.panels){\n            panel.innerHTML = content;\n        }\n    }\n\n    /**\n     * restore panels content\n     */\n    restorePanelsContent(){\n\n        for(let panel of this.panels){\n\n            if(panel.initialContent) {\n                panel.innerHTML = panel.initialContent;\n            }\n        }\n    }\n\n    /**\n     * close dropdown\n     */\n    close(){\n        for(let dropdownContent of this.contents){\n\n            dropdownContent.classList.remove(this.panels[0].element.openedClass);\n        }\n\n        for(let panel of this.panels){\n            panel.classList.remove(panel.element.openedClass);\n            panel.element.classList.remove(panel.element.openedClass);\n        }\n    }\n}\n\nexport default BaseDropdownControl;","import BaseControl from '../base.control';\n\n/**\n * base path filter control\n */\nclass BasePathFilterControl extends BaseControl{\n\n    /**\n     * constructor\n     * @param {HTMLElement} element\n     */\n    constructor(element){\n        super(element);\n\n        if(element){\n\n            /**\n             * css selector or 'default' for the browser default order (no sort); if path is empty -> the whole element\n             * @type {string}\n             */\n            this.path = (element.getAttribute('data-path') || '').trim();\n\n            /**\n             * defines if path is inverted; if true, the path filter returns all items that DON'T contain the specified path\n             * @type {string}\n             */\n            this.isInverted = (element.getAttribute('data-inverted') || '').toLowerCase().trim() === 'true';\n\n            /**\n             * optional \"OR\" logic property, used to combine different filter controls with \"OR\" logic instead of \"AND\"\n             * @type {string|null}\n             */\n            this.or = element.getAttribute('data-or') || null;\n        }\n    }\n\n    /**\n     * get path filter options used in FilterAction.pathFilter method\n     * @return {Array.<{object}>} options\n     */\n    getPathFilterOptions(){\n\n        return {\n            path: this.path,\n            isInverted: this.isInverted,\n            or: this.or\n        };\n    }\n\n    /**\n     * check if current control has the same properties like the specified control\n     * @param {BasePathFilterControl} control\n     * @return {boolean}\n     */\n    isEqualTo(control){\n        return this.path === control.path && this.isInverted === control.isInverted;\n    }\n}\n\nexport default BasePathFilterControl;","import BaseControl from '../base.control';\n\n/**\n * base range filter control\n */\nclass BaseRangeFilterControl extends BaseControl{\n\n    /**\n     * constructor\n     * @param {HTMLElement} element\n     */\n    constructor(element){\n        super(element);\n\n        if(element){\n\n            /**\n             * css selector or 'default' for the browser initial list; if path is empty -> the whole element\n             * @type {string}\n             */\n            this.path = (element.getAttribute('data-path') || '').trim();\n\n            const from = element.getAttribute('data-from');\n\n            /**\n             * min <= from <= (all numbers in the element) <= to <= max\n             * @type {number}\n             */\n            this.from = from === null ? -Infinity : Number(from);\n\n            if(isNaN(this.from)){\n                this.from = -Infinity;\n            }\n\n            const to = element.getAttribute('data-to');\n\n            /**\n             * min <= from <= (all numbers in the element) <= to <= max\n             * @type {number}\n             */\n            this.to = to === null ? Infinity : Number(to);\n\n            if(isNaN(this.to)){\n                this.to = Infinity;\n            }\n\n            const min = element.getAttribute('data-min');\n\n            /**\n             * min <= from <= (all numbers in the element) <= to <= max\n             * @type {number}\n             */\n            this.min = min === null ? this.from : Number(min);\n\n            if(isNaN(this.min)){\n                this.min = this.from;\n            }\n\n            const max = element.getAttribute('data-max');\n\n            /**\n             * min <= from <= (all numbers in the element) <= to <= max\n             * @type {number}\n             */\n            this.max = max === null ? this.to : Number(max);\n\n            if(isNaN(this.max)){\n                this.max = this.to;\n            }\n\n            /**\n             * optional \"OR\" logic property, used to combine different filter controls with \"OR\" logic instead of \"AND\"\n             * @type {string|null}\n             */\n            this.or = element.getAttribute('data-or') || null;\n        }\n    }\n\n    /**\n     * get range filter options used in FilterAction.rangeFilter method\n     * @return {Array.<{object}>} options\n     */\n    getRangeFilterOptions(){\n\n        return {\n            path: this.path,\n            min: this.min,\n            from: this.from,\n            to: this.to,\n            max: this.max,\n            or: this.or\n        };\n    }\n\n    /**\n     * check if current control has the same properties like the specified control\n     * @param {BaseRangeFilterControl} control\n     * @return {boolean}\n     */\n    isEqualTo(control){\n        return this.path === control.path &&\n                this.from === control.from &&\n                this.to === control.to &&\n                this.min === control.min &&\n                this.max === control.max;\n    }\n}\n\nexport default BaseRangeFilterControl;","import BaseControl from '../base.control';\n\n/**\n * base text filter control\n */\nclass BaseTextFilterControl extends BaseControl{\n\n    /**\n     * constructor\n     * @param {HTMLElement} element\n     */\n    constructor(element){\n        super(element);\n\n        if(element){\n\n            /**\n             * css selector or 'default' for the browser default order (no sort); if path is empty -> the whole element\n             * @type {string}\n             */\n            this.path = (element.getAttribute('data-path') || '').trim();\n\n            /**\n             * initial text value is used to handle multiple same control in different panels\n             * @type {string}\n             */\n            this.initialText = element.getAttribute('data-text') || element.value || '';\n\n            /**\n             * trimmed text value items filter by\n             * @type {string}\n             */\n            this._text = (element.getAttribute('data-text') || element.value || '').trim();\n\n            /**\n             * filter mode - contains (default), startsWith, endsWith, equal\n             * @type {string}\n             */\n            this.mode = (element.getAttribute('data-mode') || 'contains').trim();\n\n            /**\n             * optional ignore regex - used to ignore characters before sort\n             * @type {string}\n             */\n            this.regex = element.getAttribute('data-regex') || '';\n\n            /**\n             * optional \"OR\" logic property, used to combine different filter controls with \"OR\" logic instead of \"AND\"\n             * @type {string|null}\n             */\n            this.or = element.getAttribute('data-or') || null;\n        }\n    }\n\n    /**\n     * text setter\n     * @param {string} value\n     */\n    set text(value){\n\n        this.initialText = value || '';\n        this._text = (value || '').trim();\n    }\n\n    /**\n     * text getter\n     * @return {string}\n     */\n    get text(){\n\n        return this._text;\n    }\n\n\n    /**\n     * get text filter options used in FilterAction.textFilter method\n     * @return {Array.<{object}>} options\n     */\n    getTextFilterOptions(){\n\n        return {\n            path: this.path,\n            text: this.text,\n            mode: this.mode,\n            ignoreRegex: this.regex,\n            or: this.or\n        };\n    }\n\n    /**\n     * check if current control has the same properties like the specified control;\n     * the values could be different\n     * @param {BaseTextFilterControl} control\n     * @param {boolean} includeValue\n     * @return {boolean}\n     */\n    isEqualTo(control, includeValue = true){\n\n        let isEqual = this.path === control.path &&\n            this.mode === control.mode &&\n            this.regex === control.regex;\n\n        if(includeValue){\n            isEqual = isEqual && this.text === control.text;\n        }\n\n        return isEqual;\n    }\n}\n\nexport default BaseTextFilterControl;","import BaseControl from '../base.control';\n\n/**\n * base pagination control\n */\nclass BasePaginationControl extends BaseControl{\n\n    /**\n     * constructor\n     * @param {HTMLElement} element\n     */\n    constructor(element){\n        super(element);\n\n        if(element){\n\n            /**\n             * optional, 10 by default\n             * the max number of items per page\n             */\n            this.itemsPerPage = Number(element.getAttribute('data-items-per-page')) || 10;\n\n            /**\n             * optional, 0 by default\n             * the initial page\n             */\n            this.currentPage = Number(element.getAttribute('data-current-page')) || 0;\n\n            /**\n             * optional, 10 by default\n             * max number of visible pagination button\n             */\n            this.range = Number(element.getAttribute('data-range')) || 10;\n\n            /**\n             * CSS class that is used on disabled pagination buttons\n             * @type {string|string}\n             */\n            this.disabledClass = (element.getAttribute('data-disabled-class') || 'jplist-disabled').trim();\n\n            /**\n             * CSS class that is used on selected pagination buttons\n             * @type {string|string}\n             */\n            this.selectedClass = (element.getAttribute('data-selected-class') || 'jplist-selected').trim();\n        }\n    }\n\n    /**\n     * get pagination options\n     * @return {object} options\n     */\n    getPaginationOptions(){\n\n        return {\n            itemsPerPage: this.itemsPerPage,\n            currentPage: this.currentPage,\n            range: this.range\n        };\n    }\n}\n\nexport default BasePaginationControl;\n","import './base-slider.control.css';\n\n/**\n * base slider control\n */\nclass BaseSliderControl{\n\n    /**\n     * control type defined in data-jplist-control attribute;\n     * for example, data-jplist-control=\"hidden-sort\" has type='hidden-sort'\n     * @param {HTMLElement} element\n     * @param {boolean} isVertical\n     * @param {number} min\n     * @param {number} value1 - initial value 1\n     * @param {number} value2 - initial value2\n     * @param {number} max\n     * @param {Function} callback\n     */\n    constructor(element, isVertical = false, min = 0, value1 = 0, value2 = 0, max = 0, callback = (value1, value2) => {}){\n\n        if(element) {\n\n            this.element = element;\n            this.element.classList.add('jplist-slider');\n\n            if(!this.element) return;\n\n            this.isVertical = isVertical;\n            this.callback = callback;\n            this.min = min;\n            this.max = max;\n\n            if(isVertical){\n                this.element.classList.add('jplist-slider-vertical');\n            }\n\n            //create and append the first holder\n            this.handler1 = document.createElement('span');\n            this.handler1.classList.add('jplist-slider-holder-1');\n            this.element.appendChild(this.handler1);\n\n            //create and append the range element\n            this.range = document.createElement('span');\n            this.range.classList.add('jplist-slider-range');\n            this.element.appendChild(this.range);\n\n            //initial value\n            this.handler1.left = 0;\n            this.handler1.top = 0;\n            //this.handler1.value = this.getPreviewValue(0, min, max); //0\n\n            //create and append the second holder\n            this.handler2 = document.createElement('span');\n            this.handler2.classList.add('jplist-slider-holder-2');\n            this.element.appendChild(this.handler2);\n\n            //initial value\n            this.handler2.left = 0;\n            this.handler2.top = 0;\n            //this.handler2.value = this.getPreviewValue(0, min, max); //0\n\n            this.dragging = null;\n\n            this.handler1.addEventListener('mousedown', this.start.bind(this));\n            this.handler2.addEventListener('mousedown', this.start.bind(this));\n            this.handler1.addEventListener('touchstart', this.start.bind(this));\n            this.handler2.addEventListener('touchstart', this.start.bind(this));\n\n            document.addEventListener('mousemove', this.render.bind(this));\n            document.addEventListener('touchmove', this.render.bind(this));\n            window.addEventListener('resize', this.resize.bind(this));\n\n            document.addEventListener('mouseup', this.stop.bind(this));\n            document.addEventListener('touchend', this.stop.bind(this));\n            document.body.addEventListener('mouseleave', this.stop.bind(this));\n\n            this.element.addEventListener('mousedown', this.jump.bind(this));\n\n            //set initial values\n            this.setValues(value1, value2);\n        }\n    }\n\n    /**\n     * set slider values from outside\n     * @param {number} value1\n     * @param {number} value2\n     * @param {boolean} sendCallback\n     */\n    setValues(value1, value2, sendCallback = true){\n\n        if(value2 < value1){\n            value2 = value1;\n        }\n\n        const pos1 = this.getInnerValue(value1, this.min, this.max);\n        const pos2 = this.getInnerValue(value2, this.min, this.max);\n\n        this.update({\n            x: pos2,\n            y: pos2\n        }, this.handler2, sendCallback);\n\n        this.update({\n            x: pos1,\n            y: pos1\n        }, this.handler1, sendCallback);\n    }\n\n    /**\n     * convert [0, slider-width] range to [min, max] range for the specified value\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} mappedValue\n     */\n    getPreviewValue(value, min, max){\n\n        const rect = this.element.getBoundingClientRect();\n        const size = this.isVertical? 'height': 'width';\n\n        const newStart = min;\n        const newEnd = max;\n        const originalStart = 0;\n        const originalEnd = rect[size];\n\n        //return Math.round((newEnd - newStart) * ((value - originalStart) / (originalEnd - originalStart)) + newStart);\n        return (newEnd - newStart) * ((value - originalStart) / (originalEnd - originalStart)) + newStart;\n    }\n\n    /**\n     * convert [min, max] range to [0, slider-width] range for the specified value\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} mappedValue\n     */\n    getInnerValue(value, min, max){\n\n        const rect = this.element.getBoundingClientRect();\n        const size = this.isVertical? 'height': 'width';\n\n        const newStart = 0;\n        const newEnd = rect[size];\n        const originalStart = min;\n        const originalEnd = max;\n\n        //return Math.round((newEnd - newStart) * ((value - originalStart) / (originalEnd - originalStart)) + newStart);\n        return (newEnd - newStart) * ((value - originalStart) / (originalEnd - originalStart)) + newStart;\n    }\n\n    /**\n     * jump to the specified point on the slider\n     * @param {Object} e\n     */\n    jump(e){\n        e.preventDefault();\n\n        let position = this.getHandlerPos(e);\n\n        if(this.isVertical){\n            this.dragging = Math.abs(position.y - this.handler1.top) < Math.abs(position.y - this.handler2.top) ? this.handler1 : this.handler2;\n        }\n        else{\n            this.dragging = Math.abs(position.x - this.handler1.left) < Math.abs(position.x - this.handler2.left) ? this.handler1 : this.handler2;\n        }\n\n        //render the updated state\n        this.render(e);\n    }\n\n    /**\n     * update z-index of the active handler\n     */\n    setZIndex(){\n\n        const handler1ZIndex = window.getComputedStyle ? Number(document.defaultView.getComputedStyle(this.handler1, null).getPropertyValue('z-index')) || 200 : 200;\n        const handler2ZIndex = window.getComputedStyle ? Number(document.defaultView.getComputedStyle(this.handler2, null).getPropertyValue('z-index')) || 200 : 200;\n\n        if(handler1ZIndex === handler2ZIndex){\n            this.dragging.style['z-index'] = handler1ZIndex + 1;\n        }\n        else{\n            const max = Math.max(handler1ZIndex, handler2ZIndex);\n            const min = Math.min(handler1ZIndex, handler2ZIndex);\n\n            this.handler1.style['z-index'] = min;\n            this.handler2.style['z-index'] = min;\n            this.dragging.style['z-index'] = max;\n        }\n    }\n\n    /**\n     * start dragging\n     * @param {Object} e\n     */\n    start(e){\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.dragging = e.target;\n\n        //update z-index of the active handler\n        this.setZIndex();\n\n        //render the updated state\n        this.render();\n    }\n\n    /**\n     * stop dragging\n     * @param {Object} e\n     */\n    stop(e){\n        //e.preventDefault();\n\n        this.dragging = null;\n    }\n\n    /**\n     * on window resize\n     * @param {Object} e\n     */\n    resize(e){\n\n        if(this.handler1 && this.handler2){\n\n            this.setValues(this.handler1.value, this.handler2.value);\n        }\n    }\n\n    /**\n     * render the updated state\n     */\n    render(e){\n        if(e && this.dragging){\n\n            this.update(this.getHandlerPos(e), this.dragging);\n        }\n    }\n\n    /**\n     * update position and styles\n     * @param {object} position\n     * @param {element} handler\n     * @param {boolean} sendCallback\n     */\n    update(position, handler, sendCallback = true){\n\n        if(handler){\n\n            const rect = this.element.getBoundingClientRect();\n\n            const size = this.isVertical? 'height': 'width';\n            const xy = this.isVertical? 'y': 'x';\n            const lefttop = this.isVertical? 'top': 'left';\n\n            if(position[xy] < 0){\n                position[xy] = 0;\n            }\n\n            if(position[xy] > rect[size]){\n                position[xy] = rect[size];\n            }\n\n            if(handler === this.handler1 && position[xy] >= this.handler2[lefttop]){\n                position[xy] = this.handler2[lefttop];\n            }\n\n            if(handler === this.handler2 && position[xy] <= this.handler1[lefttop]){\n                position[xy] = this.handler1[lefttop];\n            }\n\n            //save current value\n            handler[lefttop] = position[xy];\n            //const value = Math.round(position[xy] * 100 / rect[size]); //value in %\n            handler.value = this.getPreviewValue(position[xy], this.min, this.max);\n\n            handler.style[lefttop] = (position[xy]) + 'px';\n\n            //update range element\n            this.range.style[lefttop] = this.handler1[lefttop] + 'px';\n\n            const rangeHeight = this.handler2[lefttop] - this.handler1[lefttop];\n            this.range.style[size] = (rangeHeight >= 0 ? rangeHeight : 0) + 'px';\n\n            //call callback function\n            if(this.callback && sendCallback){\n\n                this.callback(this.handler1.value, this.handler2.value);\n            }\n        }\n    }\n\n    /**\n     * subtraction of 2 vectors\n     * @param {Object} v1 - vector #1\n     * @param {Object} v2 - vector #2\n     */\n    static sub(v1, v2){\n\n        return {\n            x: v1.x - v2.x,\n            y: v1.y - v2.y\n        };\n    }\n\n    /**\n     * get handler position from mouse / tap position\n     * @param {object} e\n     * @return {object} handler position\n     */\n    getHandlerPos(e){\n\n        const rect = this.element.getBoundingClientRect();\n\n        const point = {\n            x: e.touches && e.touches.length > 0 ? e.touches[0].pageX : e.clientX,\n            y: e.touches && e.touches.length > 0 ? e.touches[0].pageY : e.clientY\n        };\n\n        const vector = {\n            x: rect.left,\n            y: rect.top\n        };\n\n        return BaseSliderControl.sub(point, vector);\n    }\n\n}\n\nexport default BaseSliderControl;","import BaseControl from '../base.control';\n\n/**\n * base sort control\n */\nclass BaseSortControl extends BaseControl{\n\n    /**\n     * constructor\n     * @param {HTMLElement} element\n     */\n    constructor(element){\n        super(element);\n\n        if(element){\n\n            /**\n             * css selector or 'default' for the browser default order (no sort); if path is empty -> the whole element\n             * @type {string}\n             */\n            this.path = (element.getAttribute('data-path') || '').trim();\n\n            /**\n             * optional text (default), number or datetime\n             * @type {string}\n             */\n            this.dataType = (element.getAttribute('data-type') || 'text').trim().toLowerCase();\n\n            /**\n             * optional sort order: asc (default) or desc\n             * @type {string}\n             */\n            this.order = (element.getAttribute('data-order') || 'asc').trim().toLowerCase();\n\n            /**\n             * optional ignore regex - used to ignore characters before sort\n             * @type {string}\n             */\n            this.regex = element.getAttribute('data-regex') || '';\n\n            /**\n             * optional datetime format - datetime structure using wilcards {year}|{month}|{day}|{hour}|{min}|{sec}, for example: {month}/{day}/{year}\n             * @type {string}\n             */\n            this.dateTimeFormat = (element.getAttribute('data-date-format') || '').trim().toLowerCase();\n\n            /**\n             * this property indicates the number of data attribute groups [{data-path, data-order, ...}, {data-path-1, data-order-1,...}, ...]\n             * only data-path attribute is required;\n             * if multipleSortsNum > 0 => multiple sort\n             * @type {number}\n             */\n            this.multipleSortsNumber = this.getMultipleSortsNumber(element);\n\n            for(let index=1; index <= this.multipleSortsNumber; index++){\n                this['path' + index] = (element.getAttribute('data-path-' + index) || '').trim();\n                this['dataType' + index] = (element.getAttribute('data-type-' + index) || 'text').trim().toLowerCase();\n                this['order' + index] = (element.getAttribute('data-order-' + index) || 'asc').trim().toLowerCase();\n                this['regex' + index] = element.getAttribute('data-regex-' + index) || '';\n                this['dateTimeFormat' + index] = (element.getAttribute('data-date-format-' + index) || '').trim().toLowerCase();\n            }\n\n        }\n    }\n\n    /**\n     * multiple sort is defined by another sets of data attributes like {data-path-1, data-order-1,...}, {data-path-2, data-order-2,...} etc\n     * this method counts the number of such sets (= the number of attributes data-path-1, data-path-2, ...)\n     * @param {HTMLElement} element\n     * @return {number}\n     */\n    getMultipleSortsNumber(element){\n\n        let pathsNumber = 0;\n\n        for(let attr of element.attributes){\n\n            let match = null;\n            const regex = /^data-path-([0-9]+)$/g;\n\n            while (match = regex.exec(attr.nodeName)) {\n\n                const propIndex = Number(match[1]);\n\n                if(!Number.isInteger(propIndex)) continue;\n                pathsNumber++;\n            }\n        }\n\n        return pathsNumber;\n    }\n\n    /**\n     * get sort options used in SortAction.sort method\n     * @return {Array.<{path: string, dataType: text|number|datetime, order: asc|desc, ignoreRegex: string, dateTimeFormat: string}>} options\n     */\n    getSortOptions(){\n\n        const options = [];\n\n        //initial path is required\n        if(this.path){\n\n            options.push({\n                path: this.path,\n                dataType: this.dataType,\n                order: this.order,\n                ignoreRegex: this.ignoreRegex,\n                dateTimeFormat: this.dateTimeFormat\n            });\n\n            for(let index = 1; index <= this.multipleSortsNumber; index++){\n\n                options.push({\n                    path: this['path' + index],\n                    dataType: this['dataType' + index],\n                    order: this['order' + index],\n                    ignoreRegex: this['ignoreRegex' + index],\n                    dateTimeFormat: this['dateTimeFormat' + index]\n                });\n            }\n        }\n\n        return options;\n    }\n\n    /**\n     * check if current base sort control has the same properties like the specified base sort control\n     * @param {BaseSortControl} baseSortControl\n     * @return {boolean}\n     */\n    isEqualTo(baseSortControl){\n\n        let isEqual = true;\n\n        const props = ['path', 'dataType', 'order', 'regex', 'dateTimeFormat'];\n\n        for(let i=0; i<props.length; i++){\n\n            isEqual = isEqual && this[props[i]] === baseSortControl[props[i]];\n        }\n\n        isEqual = isEqual && this.multipleSortsNumber === baseSortControl.multipleSortsNumber;\n\n        for(let i=1; i <= this.multipleSortsNumber; i++){\n\n            for(let k=0; k<props.length; k++){\n\n                isEqual = isEqual && this[props[k] + i] === baseSortControl[props[k] + i];\n            }\n        }\n\n        return isEqual;\n    }\n}\n\nexport default BaseSortControl;\n","/**\n * represents a group of controls with the same data-name and data-group attributes\n */\nclass BaseControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls, deepLinkParams = null){\n\n        this.group = (group || '').trim().toLowerCase();\n        this.name = (name || 'default').trim();\n        this.controls = controls || [];\n\n        this.deepLinkParams = [];\n\n        if(deepLinkParams && deepLinkParams.has(this.group)){\n\n            this.deepLinkParams = deepLinkParams.get(this.group) || [];\n        }\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     */\n    addControl(control){\n        if(!control || control.name !== this.name || control.group !== this.group) return;\n\n        this.controls.push(control);\n    }\n\n    /**\n     * by default control's deep link is empty\n     * @returns {string}\n     */\n    getDeepLink(){\n        return '';\n    }\n\n}\n\nexport default BaseControlsGroup;","import BaseControlsGroup from '../base-controls-group';\nimport BasePathFilterControl from '../../controls/filter/base-path-filter.control';\n\n/**\n * represents a group of path filter controls with the same data-name and data-group attributes\n */\nclass BasePathFilterControlsGroup extends BaseControlsGroup{\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BasePathFilterControl|null}\n     */\n    addControl(control){\n\n        if(control.name !== this.name || control.group !== this.group){\n            return null;\n        }\n\n        const basePathFilterControl = new BasePathFilterControl(control.element);\n\n        this.controls.push(basePathFilterControl);\n\n        return basePathFilterControl;\n    }\n\n    /**\n     * get path filter options from all controls in the group\n     * @return {Array.<object>} path filer options\n     */\n    getPathFilterOptions(){\n\n        let options = [];\n\n        for(let control of this.controls){\n            options = options.concat(control.getPathFilterOptions());\n        }\n\n        return options;\n    }\n\n}\n\nexport default BasePathFilterControlsGroup;\n","import BaseControlsGroup from '../base-controls-group';\nimport BaseRangeFilterControl from '../../controls/filter/base-range-filter.control';\n\n/**\n * represents a group of range filter controls with the same data-name and data-group attributes\n */\nclass BaseRangeFilterControlsGroup extends BaseControlsGroup{\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BaseRangeFilterControl|null}\n     */\n    addControl(control){\n\n        if(control.name !== this.name || control.group !== this.group){\n            return null;\n        }\n\n        const baseRangeFilterControl = new BaseRangeFilterControl(control.element);\n\n        this.controls.push(baseRangeFilterControl);\n\n        return baseRangeFilterControl;\n    }\n\n    /**\n     * get range filter options from all controls in the group\n     * @return {Array.<object>} range filer options\n     */\n    getRangeFilterOptions(){\n\n        let options = [];\n\n        for(let control of this.controls){\n            options = options.concat(control.getRangeFilterOptions());\n        }\n\n        return options;\n    }\n\n}\n\nexport default BaseRangeFilterControlsGroup;\n","import BaseControlsGroup from '../base-controls-group';\nimport BaseTextFilterControl from '../../controls/filter/base-text-filter.control';\n\n/**\n * represents a group of text filter controls with the same data-name and data-group attributes\n */\nclass BaseTextFilterControlsGroup extends BaseControlsGroup{\n\n    /**\n     * get text filter options from all controls in the group\n     * @return {Array.<object>} text filter options\n     */\n    getTextFilterOptions(){\n\n        let options = [];\n\n        for(let control of this.controls){\n            options = options.concat(control.getTextFilterOptions());\n        }\n\n        return options;\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BaseTextFilterControl|null}\n     */\n    addControl(control){\n\n        if(control.name !== this.name || control.group !== this.group){\n            return null;\n        }\n\n        const baseTextFilterControl = new BaseTextFilterControl(control.element);\n\n        this.controls.push(baseTextFilterControl);\n\n        return baseTextFilterControl;\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n\n        const dl = this.controls.map(control => control.id && control.text.trim() !== '' ? (control.id + '=' + control.text.trim()) : '').filter(str => str !== '');\n\n        const unique = Array.from(new Set(dl));\n        return unique.join('&');\n    }\n}\n\nexport default BaseTextFilterControlsGroup;\n","const SELECTED_CLASS = 'jplist-selected';\n\n/**\n * buttons mixin\n * used for multiple inheritance\n * usage example:\n * class ButtonsTextFilterControl extends ButtonsMixin(BaseTextFilterControlsGroup)\n * @param {class} superclass\n * @return {class}\n */\nconst ButtonsMixin = superclass => class extends superclass {\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n\n        this.checkboxes = [];\n        this.radios = [];\n    }\n\n    /**\n     * add control to the group\n     * @param {BasePathFilterControl} control\n     */\n    addControl(control){\n\n        const baseButtonControl = super.addControl(control);\n\n        //get additional control properties\n        baseButtonControl.selected = baseButtonControl.element.getAttribute('data-selected') === 'true';\n        baseButtonControl.mode = baseButtonControl.element.getAttribute('data-mode') || 'radio';\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseButtonControl.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseButtonControl.id);\n\n            if(deepLinkParam){\n                baseButtonControl.selected = deepLinkParam.value === '1';\n            }\n        }\n\n        if(baseButtonControl.mode === 'radio'){\n\n            this.radios.push(baseButtonControl);\n            this.handleRadios();\n        }\n\n        if(baseButtonControl.mode === 'checkbox'){\n\n            this.checkboxes.push(baseButtonControl);\n            this.handleCheckboxes();\n        }\n\n        /**\n         * on control click -> change the selected control\n         */\n        baseButtonControl.element.addEventListener('click', e => {\n\n            e.preventDefault();\n\n            if(baseButtonControl.mode === 'checkbox'){\n\n                baseButtonControl.selected = !baseButtonControl.selected;\n\n                this.checkboxes.forEach(cb => {\n\n                    if(cb.isEqualTo(baseButtonControl)){\n                        cb.selected = baseButtonControl.selected;\n                    }\n                });\n\n                this.handleCheckboxes();\n            }\n\n            if(baseButtonControl.mode === 'radio'){\n\n                for (let radio of this.radios) {\n                    radio.selected = false;\n                }\n\n                baseButtonControl.selected = true;\n\n                this.handleRadios();\n            }\n\n            if(window.jplist) {\n\n                window.jplist.refresh(this.group, baseButtonControl);\n            }\n        });\n    }\n\n    /**\n     * handle checkbox mode controls\n     */\n    handleCheckboxes(){\n\n        for(let cb of this.checkboxes){\n\n            if(cb.selected){\n                cb.element.classList.add(SELECTED_CLASS);\n            }\n            else{\n                cb.element.classList.remove(SELECTED_CLASS);\n            }\n\n            cb.element.checked = cb.selected;\n        }\n    }\n\n    /**\n     * get the latest selected radio\n     * @return {BasePathFilterControl} latestSelectedRadio\n     */\n    getLastSelectedRadio(){\n\n        let latestSelectedRadio = null;\n\n        //find the latest selected radio\n        for (let radio of this.radios) {\n\n            if (radio.selected) {\n                latestSelectedRadio = radio;\n            }\n        }\n\n        return latestSelectedRadio;\n    }\n\n    /**\n     * handle radio buttons\n     */\n    handleRadios(){\n\n        if(this.radios.length > 0) {\n\n            let latestSelectedRadio = this.getLastSelectedRadio();\n\n            //remove selected from all radios\n            for (let radio of this.radios) {\n\n                radio.selected = false;\n                radio.element.classList.remove(SELECTED_CLASS);\n            }\n\n            if(latestSelectedRadio) {\n\n                this.radios.forEach(radio => {\n\n                    if(radio.isEqualTo(latestSelectedRadio)){\n                        radio.selected = true;\n                        radio.element.checked = true;\n                        radio.element.classList.add(SELECTED_CLASS);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n        const cbArr = this.checkboxes.map(cb => {\n\n            if(cb.id){\n                return cb.selected ? cb.id + '=1' : cb.id + '=0';\n            }\n            else{\n                return '';\n            }\n\n        }).filter(str => str !== '');\n\n        const radioArr = this.radios.map(radio => radio.id && radio.selected ? radio.id + '=1' : '').filter(str => str !== '');\n\n        const combined = cbArr.concat(radioArr);\n        const unique = Array.from(new Set(combined));\n        return unique.join('&');\n    }\n};\n\nexport default ButtonsMixin;","const SELECTED_CLASS = 'jplist-selected';\n\n/**\n * checkbox mixin\n * used for multiple inheritance\n * usage example:\n * class CheckboxTextFilterControl extends CheckboxMixin(BaseTextFilterControlsGroup)\n * @param {class} superclass\n * @return {class}\n */\nconst CheckboxMixin = superclass => class extends superclass {\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n\n        this.checkboxes = [];\n    }\n\n    /**\n     * add control to the group\n     * @param {BasePathFilterControl} control\n     */\n    addControl(control){\n\n        const baseControl = super.addControl(control);\n\n        //get additional control properties\n        baseControl.selected = baseControl.element.checked;\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseControl.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseControl.id);\n\n            if(deepLinkParam){\n                baseControl.selected = deepLinkParam.value === '1';\n            }\n        }\n\n        this.checkboxes.push(baseControl);\n        this.handleCheckboxes();\n\n        /**\n         * on control change -> update the selected control\n         */\n        baseControl.element.addEventListener('change', e => {\n\n            e.preventDefault();\n\n            baseControl.selected = !baseControl.selected;\n\n            this.checkboxes.forEach(cb => {\n\n                if(cb.isEqualTo(baseControl)){\n                    cb.selected = baseControl.selected;\n                }\n            });\n\n            this.handleCheckboxes();\n\n            if(window.jplist) {\n\n                window.jplist.refresh(this.group, baseControl);\n            }\n        });\n    }\n\n    /**\n     * handle checkbox mode controls\n     */\n    handleCheckboxes(){\n\n        for(let cb of this.checkboxes){\n\n            if(cb.selected){\n                cb.element.classList.add(SELECTED_CLASS);\n            }\n            else{\n                cb.element.classList.remove(SELECTED_CLASS);\n            }\n\n            cb.element.checked = cb.selected;\n        }\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n        const cbArr = this.checkboxes.map(cb => {\n\n            if(cb.id){\n                return cb.selected ? cb.id + '=1' : cb.id + '=0';\n            }\n            else{\n                return '';\n            }\n\n        }).filter(str => str !== '');\n        const unique = Array.from(new Set(cbArr));\n        return unique.join('&');\n    }\n};\n\nexport default CheckboxMixin;","const SELECTED_CLASS = 'jplist-selected';\n\n/**\n * radio buttons mixin\n * used for multiple inheritance\n * usage example:\n * class CheckboxTextFilterControl extends CheckboxMixin(BaseTextFilterControlsGroup)\n * @param {class} superclass\n * @return {class}\n */\nconst RadioButtonsMixin = superclass => class extends superclass {\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n\n        this.radios = [];\n    }\n\n    /**\n     * add control to the group\n     * @param {BasePathFilterControl} control\n     */\n    addControl(control){\n\n        const baseControl = super.addControl(control);\n\n        //get additional control properties\n        baseControl.selected = baseControl.element.checked;\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseControl.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseControl.id);\n\n            if(deepLinkParam){\n                baseControl.selected = deepLinkParam.value === '1';\n            }\n        }\n\n        this.radios.push(baseControl);\n        this.handleRadios();\n\n        /**\n         * on control change -> update the selected control\n         */\n        baseControl.element.addEventListener('change', e => {\n\n            e.preventDefault();\n\n            for (let radio of this.radios) {\n                radio.selected = false;\n            }\n\n            baseControl.selected = true;\n\n            this.handleRadios();\n\n            if(window.jplist) {\n\n                window.jplist.refresh(this.group, baseControl);\n            }\n        });\n    }\n\n    /**\n     * get the latest selected radio\n     * @return {BasePathFilterControl} latestSelectedRadio\n     */\n    getLastSelectedRadio(){\n\n        let latestSelectedRadio = null;\n\n        //find the latest selected radio\n        for (let radio of this.radios) {\n\n            if (radio.selected) {\n                latestSelectedRadio = radio;\n            }\n        }\n\n        return latestSelectedRadio;\n    }\n\n    /**\n     * handle radio buttons\n     */\n    handleRadios(){\n\n        if(this.radios.length > 0) {\n\n            let latestSelectedRadio = this.getLastSelectedRadio();\n\n            //remove selected from all radios\n            for (let radio of this.radios) {\n\n                radio.selected = false;\n                radio.element.classList.remove(SELECTED_CLASS);\n            }\n\n            if(latestSelectedRadio) {\n\n                this.radios.forEach(radio => {\n\n                    if(radio.isEqualTo(latestSelectedRadio)){\n                        radio.selected = true;\n                        radio.element.checked = true;\n                        radio.element.classList.add(SELECTED_CLASS);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n        const radioArr = this.radios.map(radio => radio.id && radio.selected ? radio.id + '=1' : '').filter(str => str !== '');\n        const unique = Array.from(new Set(radioArr));\n        return unique.join('&');\n    }\n};\n\nexport default RadioButtonsMixin;","import BaseControlsGroup from '../base-controls-group';\nimport BasePaginationControl from '../../controls/pagination/base-pagination.control';\n\n/**\n * represents a group of pagination controls with the same data-name and data-group attributes\n */\nclass BasePaginationControlsGroup extends BaseControlsGroup{\n\n    /**\n     * there can be only 1 pagination options object;\n     * in case of multiple -> get the latest\n     * @return {object|null} pagination options\n     */\n    getPaginationOptions(){\n\n        if(this.controls.length > 0){\n            return this.controls[this.controls.length - 1].getPaginationOptions();\n        }\n\n        return null;\n    }\n\n    /**\n     * update controls according to the pagination options calculated using PaginationAction class;\n     * @param {PaginationAction} paginationOptions\n     */\n    setPaginationOptions(paginationOptions){}\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BasePaginationControl|null}\n     */\n    addControl(control){\n\n        if(control.name !== this.name || control.group !== this.group){\n            return null;\n        }\n\n        const basePaginationControl = new BasePaginationControl(control.element);\n\n        this.controls.push(basePaginationControl);\n\n        return basePaginationControl;\n    }\n}\n\nexport default BasePaginationControlsGroup;\n","import BaseControlsGroup from '../base-controls-group';\nimport BaseSortControl from '../../controls/sort/base-sort.control';\n\n/**\n * represents a group of sort controls with the same data-name and data-group attributes\n */\nclass BaseSortControlsGroup extends BaseControlsGroup{\n\n    /**\n     * get sort options from all controls in the group\n     * @return {Array.<object>} sortOptions\n     */\n    getSortOptions(){\n\n        let sortOptions = [];\n\n        for(let control of this.controls){\n            sortOptions = sortOptions.concat(control.getSortOptions());\n        }\n\n        return sortOptions;\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BaseSortControl|null}\n     */\n    addControl(control){\n\n        if(control.name !== this.name || control.group !== this.group){\n            return null;\n        }\n\n        const baseSortControl = new BaseSortControl(control.element);\n\n        this.controls.push(baseSortControl);\n\n        return baseSortControl;\n    }\n}\n\nexport default BaseSortControlsGroup;\n","import BaseControlsGroup from '../base/groups/base-controls-group';\nimport FilterAction from \"../../actions/filter/filter.action\";\nimport BasePathFilterControl from \"../base/controls/filter/base-path-filter.control\";\nimport BaseTextFilterControl from \"../base/controls/filter/base-text-filter.control\";\nimport BaseRangeFilterControl from \"../base/controls/filter/base-range-filter.control\";\n\n/**\n * counter control\n * Example:\n * <span\n     data-jplist-control=\"counter\"\n     data-group=\"group1\"\n     data-format=\"({count})\"\n     data-path=\".title\"\n     data-mode=\"dynamic\"\n     data-name=\"counter-title-filter\"\n     data-filter-type=\"path\"></span>\n */\nclass CounterControl extends BaseControlsGroup{\n\n    /**\n     * get dynamic counter value\n     * @param {Array.<HTMLElement>} filtered\n     * @param {BaseControl} baseFilterControl\n     * @param {string} filterType - text, path or range\n     * @return {number} count\n     */\n    static getDynamicCounterValue(baseFilterControl, filterType, filtered){\n\n        let count = 0;\n\n        filtered = CounterControl.getFilteredItems(baseFilterControl, filterType, filtered);\n\n        return filtered.length;\n    }\n\n    /**\n     * get static counter value\n     * @param {BaseControl} baseFilterControl\n     * @param {string} filterType - text, path or range\n     * @param {Array.<object>} group\n     * @return {number} count\n     */\n    static getStaticCounterValue(baseFilterControl, filterType, group){\n\n        let count = 0;\n\n        //there can be more than one block of items with the same group name\n        //each itemsBlock has structure: {root: HTMLElement, items: Array.<HTMLElement>}\n        for(let itemsBlock of group){\n\n            let filtered = itemsBlock.items;\n\n            filtered = CounterControl.getFilteredItems(baseFilterControl, filterType, filtered);\n\n            count += filtered.length;\n        }\n\n        return count;\n    }\n\n    /**\n     * get filtered items\n     * @param {BaseControl} baseFilterControl\n     * @param {string} filterType - text, path or range\n     * @param {Array.<HTMLElement>} filtered\n     * @return {Array.<HTMLElement>}\n     */\n    static getFilteredItems(baseFilterControl, filterType, filtered){\n\n        switch(filterType){\n            case 'text' : {\n                filtered = FilterAction.textFilter(\n                    filtered,\n                    baseFilterControl.text,\n                    baseFilterControl.path,\n                    baseFilterControl.mode,\n                    baseFilterControl.regex);\n                break;\n            }\n\n            case 'path' : {\n                filtered = FilterAction.pathFilter(filtered,\n                    baseFilterControl.path,\n                    baseFilterControl.isInverted);\n                break;\n            }\n\n            case 'range' : {\n                filtered = FilterAction.rangeFilter(filtered,\n                    baseFilterControl.path,\n                    baseFilterControl.from,\n                    baseFilterControl.to,\n                    baseFilterControl.min,\n                    baseFilterControl.max);\n                break;\n            }\n        }\n\n        return filtered;\n    }\n\n    /**\n     * render control HTML\n     * @param {number} countValue\n     */\n    render(countValue){\n\n        for(let control of this.controls){\n\n            control.element.innerHTML = control.format.replace('{count}', countValue);\n        }\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BaseControl|null}\n     */\n    addControl(control){\n\n        super.addControl(control);\n\n        control.filterType = control.element.getAttribute('data-filter-type') || 'path'; //text, path or range\n        control.format = control.element.getAttribute('data-format') || '{count}';\n        control.mode = control.element.getAttribute('data-mode') || 'dynamic'; //static or dynamic\n\n        let baseFilterControl = null;\n\n        switch(control.filterType){\n\n            case 'text' : {\n\n                baseFilterControl = new BaseTextFilterControl(control.element);\n                break;\n            }\n\n            case 'path' : {\n\n                baseFilterControl = new BasePathFilterControl(control.element);\n                break;\n            }\n\n            case 'range' : {\n\n                baseFilterControl = new BaseRangeFilterControl(control.element);\n                break;\n            }\n        }\n\n        control.element.addEventListener('jplist.state', (e) => {\n\n            if(!baseFilterControl || !e.jplistState) return;\n\n            let count = 0;\n\n            if(control.mode === 'static' && e.jplistState.groups && e.jplistState.groups.has(control.group)){\n\n                //find group by name\n                const group = e.jplistState.groups.get(control.group);\n\n                count = CounterControl.getStaticCounterValue(baseFilterControl, control.filterType, group);\n            }\n\n            if(control.mode === 'dynamic' && e.jplistState.filtered && e.jplistState.filtered.length > 0){\n\n                count = CounterControl.getDynamicCounterValue(baseFilterControl, control.filterType, e.jplistState.filtered);\n            }\n\n            //render counter HTML\n            this.render(count);\n\n        }, false);\n    }\n}\n\nexport default CounterControl;","import BasePathFilterControlsGroup from '../../../base/groups/filter/base-path-filter-controls-group';\nimport ButtonsMixin from '../../../base/groups/mixins/buttons.mixin';\n\n/**\n * buttons path filter control\n */\nclass ButtonsPathFilterControl extends ButtonsMixin(BasePathFilterControlsGroup){\n\n    /**\n     * get path filter options from all controls in the group\n     * @return {Array.<object>} path filter options\n     */\n    getPathFilterOptions(){\n\n        let options = [];\n\n        //get options from the latest selected radio if exists\n        let latestSelectedRadio = this.getLastSelectedRadio();\n\n        if(latestSelectedRadio){\n            options = options.concat(latestSelectedRadio.getPathFilterOptions());\n        }\n\n        //add all selected checkboxes\n        for(let checkbox of this.checkboxes){\n\n            if(checkbox.selected) {\n                options = options.concat(checkbox.getPathFilterOptions());\n            }\n        }\n\n        return options;\n    }\n}\n\nexport default ButtonsPathFilterControl;","import BasePathFilterControlsGroup from '../../../base/groups/filter/base-path-filter-controls-group';\nimport CheckboxMixin from '../../../base/groups/mixins/checkbox.mixin';\n\n/**\n * checkbox path filter control\n */\nclass CheckboxPathFilterControl extends CheckboxMixin(BasePathFilterControlsGroup){\n\n    /**\n     * get path filter options from all controls in the group\n     * @return {Array.<object>} path filter options\n     */\n    getPathFilterOptions(){\n\n        let options = [];\n\n        //add all selected checkboxes\n        for(let checkbox of this.checkboxes){\n\n            if(checkbox.selected) {\n                options = options.concat(checkbox.getPathFilterOptions());\n            }\n        }\n\n        return options;\n    }\n}\n\nexport default CheckboxPathFilterControl;","import BasePathFilterControlsGroup from '../../../base/groups/filter/base-path-filter-controls-group';\nimport BasePathFilterControl from '../../../base/controls/filter/base-path-filter.control';\nimport BaseDropdownControl from '../../../base/controls/dropdown/base-dropdown.control';\n\n/**\n * dropdown filter control\n */\nclass DropdownFilterControl extends BasePathFilterControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n        this.selected = '';\n        this.id = '';\n    }\n\n    /**\n     * add control to the group\n     * @param {BasePathFilterControl} control\n     */\n    addControl(control){\n\n        //a dropdown has the following custom properties:\n        //  -- dropdown - custom dropdown behaviour, styles, classes\n        //  -- buttons - the list of dropdown buttons, each of them is BaseSortControl\n        const basePathFilterControl = super.addControl(control);\n\n        //generate dropdown instance for the given control;\n        //this instance adds dropdown classes, styles and behaviour\n        basePathFilterControl.dropdown = new BaseDropdownControl(control.element);\n        basePathFilterControl.buttons = [];\n\n        //each button inside dropdown is a separate path filter control that defined by data-path attribute;\n        //they are stored in basePathFilterControl.buttons array\n        let buttons = basePathFilterControl.element.querySelectorAll('[data-path]');\n\n        for(let button of buttons){\n\n            button.setAttribute('data-name', this.name);\n            button.setAttribute('data-group', this.group);\n            button.setAttribute('data-jump', basePathFilterControl.jump);\n\n            let btnPathFilterControl = new BasePathFilterControl(button);\n\n            //save newly created button in the basePathFilterControl.buttons array\n            basePathFilterControl.buttons.push(btnPathFilterControl);\n\n            /**\n             * on control button click -> update the selected control\n             */\n            btnPathFilterControl.element.addEventListener('click', e => {\n\n                e.preventDefault();\n\n                //clicked button should be the selected one\n                this.selected = btnPathFilterControl;\n\n                this.setSelectedButton(basePathFilterControl);\n\n                if(window.jplist) {\n\n                    window.jplist.refresh(this.group, btnPathFilterControl);\n                }\n            });\n        }\n\n        this.selected = DropdownFilterControl.getSelectedButton(basePathFilterControl.buttons);\n        this.setSelectedButton(basePathFilterControl);\n\n        //check if control contains a link and it is in the deep links parameters\n        if(basePathFilterControl.id){\n\n            this.id = basePathFilterControl.id;\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === basePathFilterControl.id);\n\n            if(deepLinkParam){\n\n                const deepLinkBtn = basePathFilterControl.buttons.find(btn => {\n\n                    const btnValue = btn.element.getAttribute('data-value');\n                    return (deepLinkParam.value === btnValue) ? btn : null;\n                });\n\n                if(deepLinkBtn) {\n                    this.selected = deepLinkBtn;\n                    this.setSelectedButton(basePathFilterControl);\n                }\n            }\n        }\n    }\n\n    /**\n     * get path filter options from all controls in the group\n     * @return {Array.<object>} pathFilterOptions\n     */\n    getPathFilterOptions(){\n\n        if(this.selected){\n            return [this.selected.getPathFilterOptions()];\n        }\n\n        return [];\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n\n        if(this.id && this.selected){\n            return this.id + '=' + this.selected.element.getAttribute('data-value') || '';\n        }\n\n        return '';\n    }\n\n    /**\n     * get selected button that has data-selected=\"true\" data attribute;\n     * if there is no data-selected attribute -> take the first button\n     * @param {Array.<BasePathFilterControl>} buttons\n     * @return {BasePathFilterControl|null}\n     */\n    static getSelectedButton(buttons){\n\n        if(buttons.length <= 0) return null;\n\n        for(let button of buttons){\n            if(button.element.getAttribute('data-selected') === 'true'){\n                return button;\n            }\n        }\n\n        return buttons[0];\n    }\n\n    /**\n     * set selected button\n     * @param {BasePathFilterControl} basePathFilterControl\n     */\n    setSelectedButton(basePathFilterControl){\n\n        for(let control of this.controls){\n\n            if(!control.dropdown) continue;\n\n            //verify that dropdown has such button\n            const dropdownBtn = basePathFilterControl.buttons.find(btn => this.selected.isEqualTo(btn));\n\n            if(dropdownBtn){\n\n                //update dropdown panels value\n                control.dropdown.setPanelsContent(dropdownBtn.element.textContent);\n            }\n\n            control.dropdown.close();\n        }\n    }\n\n}\n\nexport default DropdownFilterControl;","import BasePathFilterControlsGroup from '../../../base/groups/filter/base-path-filter-controls-group';\nimport RadioButtonsMixin from '../../../base/groups/mixins/radio-buttons.mixin';\n\n/**\n * radio buttons path filter control\n */\nclass RadioButtonsPathFilterControl extends RadioButtonsMixin(BasePathFilterControlsGroup){\n\n    /**\n     * get path filter options from all controls in the group\n     * @return {Array.<object>} path filter options\n     */\n    getPathFilterOptions(){\n\n        let options = [];\n\n        //get options from the latest selected radio if exists\n        let latestSelectedRadio = this.getLastSelectedRadio();\n\n        if(latestSelectedRadio){\n            options = options.concat(latestSelectedRadio.getPathFilterOptions());\n        }\n\n        return options;\n    }\n}\n\nexport default RadioButtonsPathFilterControl;","import BasePathFilterControlsGroup from '../../../base/groups/filter/base-path-filter-controls-group';\nimport BasePathFilterControl from '../../../base/controls/filter/base-path-filter.control';\n\n/**\n * select filter control\n */\nclass SelectFilterControl extends BasePathFilterControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n\n        this.options = [];\n        this.selected = '';\n        this.id = '';\n    }\n\n    /**\n     * add control to the group\n     * @param {BasePathFilterControl} control\n     */\n    addControl(control){\n\n        const selectFilterControl = super.addControl(control);\n\n        let options = selectFilterControl.element.querySelectorAll('option');\n\n        for(let option of options){\n\n            option.setAttribute('data-name', this.name);\n            option.setAttribute('data-group', this.group);\n\n            if(!this.options.find(opt => opt.element.value === option.value)){\n                this.options.push(new BasePathFilterControl(option));\n            }\n        }\n\n        this.selected = selectFilterControl.element.value;\n\n        //check if control contains a link and it is in the deep links parameters\n        if(selectFilterControl.id){\n\n            this.id = selectFilterControl.id;\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === selectFilterControl.id);\n\n            if(deepLinkParam){\n                selectFilterControl.element.value = deepLinkParam.value;\n                this.selected = deepLinkParam.value;\n            }\n        }\n\n        /**\n         * on control event\n         */\n        selectFilterControl.element.addEventListener('change', e => {\n\n            e.preventDefault();\n\n            this.selected = e.target.value;\n\n            for(let select of this.controls){\n                select.element.value = this.selected;\n            }\n\n            if(window.jplist) {\n\n                window.jplist.refresh(this.group, selectFilterControl);\n            }\n        });\n    }\n\n    /**\n     * get path filter options from all controls in the group\n     * @return {Array.<object>} sortOptions\n     */\n    getPathFilterOptions(){\n\n        let selected = this.options.find(opt => opt.element.value === this.selected);\n\n        if(selected){\n            return [selected.getPathFilterOptions()];\n        }\n\n        return [];\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n\n        let selected = this.options.find(opt => opt.element.value === this.selected);\n\n        if(this.id){\n            return this.id + '=' + selected.element.value;\n        }\n\n        return '';\n    }\n\n}\n\nexport default SelectFilterControl;","import BaseRangeFilterControlsGroup from '../../../base/groups/filter/base-range-filter-controls-group';\nimport ButtonsMixin from '../../../base/groups/mixins/buttons.mixin';\n\n/**\n * buttons range filter\n */\nclass ButtonsRangeFilter extends ButtonsMixin(BaseRangeFilterControlsGroup){\n\n    /**\n     * get range filter options from all controls in the group\n     * @return {Array.<object>} path filter options\n     */\n    getRangeFilterOptions(){\n\n        let options = [];\n\n        //get options from the latest selected radio if exists\n        let latestSelectedRadio = this.getLastSelectedRadio();\n\n        if(latestSelectedRadio){\n            options = options.concat(latestSelectedRadio.getRangeFilterOptions());\n        }\n\n        //add all selected checkboxes\n        for(let checkbox of this.checkboxes){\n\n            if(checkbox.selected) {\n                options = options.concat(checkbox.getRangeFilterOptions());\n            }\n        }\n\n        return options;\n    }\n}\n\nexport default ButtonsRangeFilter;","import BaseRangeFilterControlsGroup from '../../../base/groups/filter/base-range-filter-controls-group';\nimport BaseSliderControl from '../../../base/controls/slider/base-slider.control';\n\n/**\n * range slider filter\n */\nclass SliderRangeFilter extends BaseRangeFilterControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     */\n    addControl(control){\n\n        const rangeSliderFilterControl = super.addControl(control);\n\n        const sliderEl = control.element.querySelector('[data-type=\"slider\"]');\n        rangeSliderFilterControl.val1Elements = control.element.querySelectorAll('[data-type=\"value-1\"]');\n        rangeSliderFilterControl.val2Elements = control.element.querySelectorAll('[data-type=\"value-2\"]');\n        rangeSliderFilterControl.minElements = control.element.querySelectorAll('[data-type=\"min\"]');\n        rangeSliderFilterControl.maxElements = control.element.querySelectorAll('[data-type=\"max\"]');\n\n        if(!sliderEl) return;\n\n        //control properties\n        const orientation = control.element.getAttribute('data-orientation') || 'horizontal'; //'vertical'\n\n        for(let el of rangeSliderFilterControl.minElements){\n            el.textContent = rangeSliderFilterControl.min;\n        }\n\n        for(let el of rangeSliderFilterControl.maxElements){\n            el.textContent = rangeSliderFilterControl.max;\n        }\n\n        //check if control contains a link and it is in the deep links parameters\n        if(rangeSliderFilterControl.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === rangeSliderFilterControl.id);\n\n            if(deepLinkParam && deepLinkParam.value){\n                const parts = deepLinkParam.value.split('_');\n\n                if(parts.length === 2){\n\n                    rangeSliderFilterControl.from = Number(parts[0]) || 0;\n                    rangeSliderFilterControl.to = Number(parts[1]) || 0;\n                }\n            }\n        }\n\n        rangeSliderFilterControl.slider = new BaseSliderControl(\n            sliderEl,\n            orientation === 'vertical',\n            rangeSliderFilterControl.min,\n            rangeSliderFilterControl.from,\n            rangeSliderFilterControl.to,\n            rangeSliderFilterControl.max,\n            (value1, value2) => {\n\n                for(let el of rangeSliderFilterControl.val1Elements){\n                    el.textContent = Math.round(value1);\n                }\n\n                for(let el of rangeSliderFilterControl.val2Elements){\n                    el.textContent = Math.round(value2);\n                }\n\n                for(let control of this.controls){\n\n                    if(!control.slider) continue;\n\n                    control.slider.setValues(value1, value2, false);\n                }\n\n                if(window.jplist) {\n\n                    window.jplist.refresh(this.group, rangeSliderFilterControl);\n                }\n        });\n    }\n\n    /**\n     * get range filter options from all controls in the group\n     * @return {Array.<object>} path filter options\n     */\n    getRangeFilterOptions(){\n\n        let options = [];\n\n        for(let control of this.controls){\n\n            if(!control.slider || !control.slider.handler1 || !control.slider.handler2) continue;\n\n            const controlOptions = control.getRangeFilterOptions();\n            controlOptions.from = control.slider.handler1.value;\n            controlOptions.to = control.slider.handler2.value;\n\n            options = options.concat(controlOptions);\n        }\n\n        return options;\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n\n        const arr = this.controls.map(control => {\n\n            if(!control.id || !control.slider || !control.slider.handler1 || !control.slider.handler2) return '';\n\n            return control.id + '=' + control.slider.handler1.value + '_' + control.slider.handler2.value;\n        }).filter(str => str !== '');\n\n        const unique = Array.from(new Set(arr));\n\n        return unique.join('&');\n\n    }\n}\n\nexport default SliderRangeFilter;","import BaseTextFilterControlsGroup from '../../../base/groups/filter/base-text-filter-controls-group';\nimport ButtonsMixin from '../../../base/groups/mixins/buttons.mixin';\n\n/**\n * buttons text filter control\n */\nclass ButtonsTextFilterControl extends ButtonsMixin(BaseTextFilterControlsGroup){\n\n    /**\n     * get text filter options from all controls in the group\n     * @return {Array.<object>} text filter options\n     */\n    getTextFilterOptions(){\n\n        let options = [];\n\n        //get options from the latest selected radio if exists\n        let latestSelectedRadio = this.getLastSelectedRadio();\n\n        if(latestSelectedRadio){\n            options = options.concat(latestSelectedRadio.getTextFilterOptions());\n        }\n\n        //add all selected checkboxes\n        for(let checkbox of this.checkboxes){\n\n            if(checkbox.selected) {\n                options = options.concat(checkbox.getTextFilterOptions());\n            }\n        }\n\n        return options;\n    }\n\n}\n\nexport default ButtonsTextFilterControl;","import BaseTextFilterControlsGroup from '../../../base/groups/filter/base-text-filter-controls-group';\nimport CheckboxMixin from '../../../base/groups/mixins/checkbox.mixin';\n\n/**\n * checkbox text filter control\n */\nclass CheckboxTextFilterControl extends CheckboxMixin(BaseTextFilterControlsGroup){\n\n    /**\n     * get text filter options from all controls in the group\n     * @return {Array.<object>} path filter options\n     */\n    getTextFilterOptions(){\n\n        let options = [];\n\n        //add all selected checkboxes\n        for(let checkbox of this.checkboxes){\n\n            if(checkbox.selected) {\n                options = options.concat(checkbox.getTextFilterOptions());\n            }\n        }\n\n        return options;\n    }\n}\n\nexport default CheckboxTextFilterControl;","import BaseTextFilterControlsGroup from '../../../base/groups/filter/base-text-filter-controls-group';\nimport RadioButtonsMixin from '../../../base/groups/mixins/radio-buttons.mixin';\n\n/**\n * radio buttons text filter control\n */\nclass RadioButtonsTextFilterControl extends RadioButtonsMixin(BaseTextFilterControlsGroup){\n\n    /**\n     * get text filter options from all controls in the group\n     * @return {Array.<object>} path filter options\n     */\n    getTextFilterOptions(){\n\n        let options = [];\n\n        //get options from the latest selected radio if exists\n        let latestSelectedRadio = this.getLastSelectedRadio();\n\n        if(latestSelectedRadio){\n            options = options.concat(latestSelectedRadio.getTextFilterOptions());\n        }\n\n        return options;\n    }\n}\n\nexport default RadioButtonsTextFilterControl;","import BaseTextFilterControlsGroup from '../../../base/groups/filter/base-text-filter-controls-group';\n\n/**\n * text box filter control\n */\nclass TextboxFilterControl extends BaseTextFilterControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseTextFilterControl} control\n     */\n    addControl(control){\n\n        const baseTextFilterControl = super.addControl(control);\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseTextFilterControl.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseTextFilterControl.id);\n\n            if(deepLinkParam){\n                baseTextFilterControl.text = deepLinkParam.value;\n                baseTextFilterControl.element.value = deepLinkParam.value;\n            }\n        }\n\n        /**\n         * on control event\n         */\n        baseTextFilterControl.element.addEventListener('keyup', e => {\n\n            e.preventDefault();\n\n            baseTextFilterControl.text = e.target.value;\n\n            this.textChanged(baseTextFilterControl);\n        });\n\n        //handle clear button\n        baseTextFilterControl.clearButtonID = (baseTextFilterControl.element.getAttribute('data-clear-btn-id') || '').trim();\n\n        if(baseTextFilterControl.clearButtonID){\n\n            const clearBtn = document.getElementById(baseTextFilterControl.clearButtonID);\n\n            if(clearBtn){\n\n                /**\n                 * on clear button click\n                 */\n                clearBtn.addEventListener('click', e => {\n\n                    e.preventDefault();\n\n                    baseTextFilterControl.text = '';\n\n                    this.textChanged(baseTextFilterControl);\n                });\n            }\n        }\n    }\n\n    /**\n     * on text change\n     */\n    textChanged(baseTextFilterControl){\n\n        this.controls.forEach(control => {\n\n            if(control.isEqualTo(baseTextFilterControl, false)){\n\n                control.element.value = baseTextFilterControl.initialText;\n                control.text = baseTextFilterControl.initialText;\n            }\n        });\n\n        if(window.jplist) {\n\n            window.jplist.refresh(this.group, baseTextFilterControl);\n        }\n    }\n\n}\n\nexport default TextboxFilterControl;","import BaseControlsGroup from '../base/groups/base-controls-group';\n\nconst SELECTED_CLASS = 'jplist-selected';\n\n/**\n * layout control\n */\nclass LayoutControl extends BaseControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n\n        this.classNames = new Set();\n        this.selectedClassName = '';\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BaseControl|null}\n     */\n    addControl(control){\n\n        super.addControl(control);\n\n        control.groupClassName = control.element.getAttribute('data-class') || '';\n        control.selected = control.element.getAttribute('data-selected') === 'true';\n\n        //check if control contains a link and it is in the deep links parameters\n        if(control.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === control.id);\n\n            if(deepLinkParam){\n                control.selected = deepLinkParam.value === '1';\n            }\n            //else{\n                //control.selected = false;\n            //}\n        }\n\n        this.classNames.add(control.groupClassName);\n\n        /**\n         * on button click\n         */\n         control.element.addEventListener('click', (e) => {\n\n             e.preventDefault();\n\n             this.handleSelectedControls(control.groupClassName);\n\n             this.handleClasses();\n\n             if(window.jplist) {\n\n                 window.jplist.refresh(this.group, control);\n             }\n\n         }, false);\n\n        this.handleClasses();\n    }\n\n    /**\n     * add / remove buttons classes\n     */\n     handleClasses(){\n\n        const groups = document.querySelectorAll('[data-jplist-group=\"' + this.group + '\"]');\n\n        //remove classes from all groups\n        this.resetAllGroups(groups);\n\n        let selected = this.getLatestSelectedControl();\n\n        if(!selected) return;\n\n        this.handleSelectedControls(selected.groupClassName);\n\n        //add specified class name to each group\n        LayoutControl.addClassToGroups(selected.groupClassName, groups);\n    }\n\n    /**\n     * get the latest selected control\n     * @return {BaseControl} selected control\n     */\n     getLatestSelectedControl(){\n\n        let selected = null;\n\n        for(let control of this.controls){\n\n            if(control.selected){\n                selected = control;\n            }\n        }\n\n        if(!selected && this.controls.length > 0){\n            selected = this.controls[0];\n        }\n\n        return selected;\n    }\n\n    /**\n     * remove classes from all groups\n     * @param {NodeList} groups\n     */\n     resetAllGroups(groups){\n\n        for(let group of groups){\n\n            //remove all classes\n            for(let cn of this.classNames){\n                group.classList.remove(cn);\n            }\n        }\n    }\n\n    /**\n     * handle selected controls\n     * @param {string} selectedGroupClassName\n     */\n     handleSelectedControls(selectedGroupClassName){\n\n        for(let control of this.controls){\n\n            if(control.groupClassName === selectedGroupClassName){\n                control.selected = true;\n                control.element.classList.add(SELECTED_CLASS);\n            }\n            else{\n                control.selected = false;\n                control.element.classList.remove(SELECTED_CLASS);\n            }\n        }\n    }\n\n    /**\n     * add specified class name to each group\n     * @param {string} groupClassName\n     * @param {NodeList} groups\n     */\n    static addClassToGroups(groupClassName, groups){\n\n        for(let group of groups){\n\n            //add class if needed\n            group.classList.add(groupClassName);\n        }\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n        const arr = this.controls.map(control => {\n\n            if(control.id){\n                return control.selected ? control.id + '=1' : control.id + '=0';\n            }\n            else{\n                return '';\n            }\n\n        }).filter(str => str !== '');\n        const unique = Array.from(new Set(arr));\n        return unique.join('&');\n    }\n}\n\nexport default LayoutControl;","import BaseControlsGroup from '../base/groups/base-controls-group';\n\n/**\n * no results control\n * Example:\n * <div data-jplist-control=\"no-results\" data-group=\"group1\" name=\"no-results\">No Results Found</div>\n */\nclass NoResultsControl extends BaseControlsGroup{\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BaseControl|null}\n     */\n    addControl(control){\n\n        super.addControl(control);\n\n        control.element.addEventListener('jplist.state', (e) => {\n\n            if(!e.jplistState) return;\n\n            const itemsNumber = Number(e.jplistState.itemsNumber) || 0;\n            control.element.style.display = itemsNumber === 0 ? '' : 'none';\n\n        }, false);\n\n    }\n}\n\nexport default NoResultsControl;","import BasePaginationControlsGroup from '../base/groups/pagination/base-pagination-controls-group';\nimport BaseDropdownControl from '../base/controls/dropdown/base-dropdown.control';\n\n/**\n * pagination control\n */\nclass PaginationControl extends BasePaginationControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.currentPage = 0;\n        this.itemsPerPage = 0;\n        this.range = 0;\n        this.id = '';\n    }\n\n    /**\n     * add control to the group\n     * @param {BasePaginationControl} control\n     */\n    addControl(control){\n\n        const basePaginationControl = super.addControl(control);\n\n        //update properties - we take them from the latest pagination control in the group\n        this.currentPage = basePaginationControl.currentPage;\n        this.itemsPerPage = Number(basePaginationControl.itemsPerPage) || 0;\n        this.range = basePaginationControl.range;\n\n        //restore control state from the deep link value if needed\n        this.restoreFromDeepLink(basePaginationControl);\n\n        //this template is used for generating pagination buttons\n        basePaginationControl.pageButtonsHolder = basePaginationControl.element.querySelector('[data-type=\"pages\"]');\n\n        if(basePaginationControl.pageButtonsHolder){\n            basePaginationControl.btnTemplate = basePaginationControl.pageButtonsHolder.innerHTML;\n        }\n\n        //first, last, next and prev button\n        basePaginationControl.firstButtons = basePaginationControl.element.querySelectorAll('[data-type=\"first\"]');\n        basePaginationControl.lastButtons = basePaginationControl.element.querySelectorAll('[data-type=\"last\"]');\n        basePaginationControl.prevButtons = basePaginationControl.element.querySelectorAll('[data-type=\"prev\"]');\n        basePaginationControl.nextButtons = basePaginationControl.element.querySelectorAll('[data-type=\"next\"]');\n\n        //event handlers\n        PaginationControl.bindEventHandler(basePaginationControl.firstButtons, 'click', this.pageButtonClick.bind(this), basePaginationControl);\n        PaginationControl.bindEventHandler(basePaginationControl.lastButtons, 'click', this.pageButtonClick.bind(this), basePaginationControl);\n        PaginationControl.bindEventHandler(basePaginationControl.prevButtons, 'click', this.pageButtonClick.bind(this), basePaginationControl);\n        PaginationControl.bindEventHandler(basePaginationControl.nextButtons, 'click', this.pageButtonClick.bind(this), basePaginationControl);\n\n        //items per page select\n        basePaginationControl.itemsPerPageSelects = Array.from(basePaginationControl.element.querySelectorAll('[data-type=\"items-per-page\"]'));\n        this.updateItemsPerPageSelect(basePaginationControl.itemsPerPageSelects);\n\n        //items per page custom drop downs\n        basePaginationControl.itemsPerPageDD = Array.from(basePaginationControl.element.querySelectorAll('[data-type=\"items-per-page-dd\"]'));\n        this.initCustomDropdowns(basePaginationControl);\n\n        PaginationControl.bindEventHandler(basePaginationControl.itemsPerPageSelects, 'change', this.selectChange.bind(this), basePaginationControl);\n\n        //information labels\n        basePaginationControl.labels = basePaginationControl.element.querySelectorAll('[data-type=\"info\"]');\n\n        if(basePaginationControl.labels) {\n            for (let label of basePaginationControl.labels) {\n                label.template = label.innerHTML;\n            }\n        }\n    }\n\n    /**\n     * update items per page value of select group\n     * @param {Array.<HTMLElement>} selects\n     */\n    updateItemsPerPageSelect(selects){\n\n        for(let select of selects){\n\n            const option = Array.from(select.options).find(option => option.value === this.itemsPerPage.toString());\n\n            if(option) {\n                select.value = Number(this.itemsPerPage) || 0;\n            }\n            else{\n                select.value = 0;\n            }\n        }\n    }\n\n    /**\n     * init custom dropdowns\n     * @param {BasePaginationControl} basePaginationControl\n     */\n    initCustomDropdowns(basePaginationControl){\n\n        //@param {HTMLCollection} itemsPerPageDD\n        const itemsPerPageDD = basePaginationControl.itemsPerPageDD;\n\n        if(!itemsPerPageDD || itemsPerPageDD.length <=0) return;\n\n        for(let dd of itemsPerPageDD){\n\n            //create dropdown instance for each dd HTML structure;\n            //this instance adds dropdown classes, styles and behaviour\n            dd.dropdown = new BaseDropdownControl(dd);\n\n            //all dropdown buttons are keeps as buttons property\n            dd.buttons = Array.from(dd.querySelectorAll('[data-value]'));\n\n            for(let button of dd.buttons){\n\n                button.addEventListener('click', (e) => {\n\n                    e.preventDefault();\n\n                    this.itemsPerPage = Number(button.getAttribute('data-value')) || 0;\n\n                    //set selected button in all dropdowns for the current this.itemsPerPage value\n                    this.setSelectedButton();\n\n                    dd.dropdown.close();\n\n                    if(window.jplist) {\n\n                        window.jplist.refresh(this.group, basePaginationControl);\n                    }\n                });\n            }\n        }\n\n        //set selected button in all dropdowns for the current this.itemsPerPage value\n        this.setSelectedButton();\n    }\n\n    // --------------------- BUTTONS ---------------------\n\n    /**\n     * set selected button in all dropdowns for the current this.itemsPerPage value\n     */\n    setSelectedButton(){\n\n        for(let control of this.controls){\n\n            if(!control.itemsPerPageDD) continue;\n\n            for(let dd of control.itemsPerPageDD){\n\n                if(!dd.buttons) continue;\n\n                let selectedButton = dd.buttons.find(button => {\n\n                    const btnValue = Number(button.getAttribute('data-value')) || 0;\n                    return btnValue === this.itemsPerPage;\n                });\n\n                if(!selectedButton){\n\n                    selectedButton = dd.buttons.find(button => {\n                        const btnValue = Number(button.getAttribute('data-value')) || 0;\n                        return btnValue === 0;\n                    });\n                }\n\n                if(selectedButton){\n\n                    dd.dropdown.setPanelsContent(selectedButton.textContent);\n                }\n            }\n        }\n    }\n\n    // --------------------- OPTIONS ---------------------\n\n    /**\n     * there can be only 1 pagination options object;\n     * in case of multiple -> get the latest\n     * @return {object} pagination options\n     */\n    getPaginationOptions(){\n\n        return {\n            itemsPerPage: this.itemsPerPage,\n            currentPage: this.currentPage,\n            range: this.range\n        };\n    }\n\n    /**\n     * update controls according to the pagination options calculated using PaginationAction class;\n     * @param {PaginationAction} paginationOptions\n     */\n    setPaginationOptions(paginationOptions){\n\n        if(!paginationOptions) return;\n\n        //update properties\n        this.currentPage = paginationOptions.currentPage;\n        this.itemsPerPage = paginationOptions.itemsPerPage;\n\n        for(let control of this.controls){\n\n            if(!control.btnTemplate || !control.pageButtonsHolder) continue;\n\n            //remove all old buttons\n            while (control.pageButtonsHolder.firstChild) {\n                control.pageButtonsHolder.removeChild(control.pageButtonsHolder.firstChild);\n            }\n\n            //generate new buttons\n            for (let i = paginationOptions.rangeStart; i <= paginationOptions.rangeEnd; i++) {\n\n                //update button text macros and button attributes\n                const div = document.createElement('div');\n                div.innerHTML = control.btnTemplate.replace(new RegExp('{pageNumber}', 'g'), (i+1)).trim();\n                const pageButton = div.firstChild;\n\n                let btn = pageButton.querySelector('[data-type=\"page\"]');\n                if(!btn){\n                    btn = pageButton;\n                }\n\n                btn.setAttribute('data-page', i.toString());\n\n                if(i === this.currentPage){\n\n                    btn.classList.add(control.selectedClass);\n                    btn.setAttribute('data-selected', 'true');\n                }\n\n                //on page button click event handler\n                btn.addEventListener('click', (e) => { this.pageButtonClick(e, btn, control); });\n\n                //add button to the buttons holder\n                control.pageButtonsHolder.appendChild(pageButton);\n            }\n\n            //update data-page attribute of first, last, prev and next buttons\n            PaginationControl.setPageAttr(control.firstButtons, 0, this.currentPage !== 0, control.disabledClass);\n\n            PaginationControl.setPageAttr(control.lastButtons,\n                paginationOptions.pagesNumber - 1,\n                this.currentPage !== paginationOptions.pagesNumber - 1,\n                control.disabledClass);\n\n            PaginationControl.setPageAttr(control.prevButtons,\n                paginationOptions.prevPage,\n                this.currentPage !== 0,\n                control.disabledClass);\n\n            PaginationControl.setPageAttr(control.nextButtons,\n                paginationOptions.nextPage,\n                this.currentPage !== paginationOptions.pagesNumber - 1,\n                control.disabledClass);\n\n            const infos = [\n                {key: '{pageNumber}', value: paginationOptions.currentPage + 1},\n                {key: '{pagesNumber}', value: paginationOptions.pagesNumber},\n                {key: '{startItem}', value: paginationOptions.start + 1},\n                {key: '{endItem}', value: paginationOptions.end},\n                {key: '{itemsNumber}', value: paginationOptions.itemsNumber}\n            ];\n\n            //update information labels\n            if(control.labels) {\n                for (let label of control.labels) {\n\n                    if(!label.template) continue;\n\n                    let html = label.template;\n\n                    for(let info of infos){\n                        html = html.replace(new RegExp(info.key, 'g'), info.value);\n                    }\n\n                    label.innerHTML = html;\n                }\n            }\n\n            //update whole control classes\n            const classesToRemove = (Array.from(control.element.classList)).filter(className => className.startsWith('jplist-pages-number-') || className.startsWith('jplist-items-number-'));\n\n            for(let className of classesToRemove){\n                control.element.classList.remove(className);\n            }\n\n            control.element.classList.add('jplist-pages-number-' + paginationOptions.pagesNumber);\n            control.element.classList.add('jplist-items-number-' + paginationOptions.itemsNumber);\n        }\n    }\n\n    // --------------------- EVENT HANDLERS ---------------------\n\n    /**\n     * page, first, last, prev and next button onclick handler\n     * @param {HTMLElement} btn\n     * @param {BasePaginationControl} control\n     */\n    pageButtonClick(e, btn, control){\n\n        if(e) {\n            e.preventDefault();\n        }\n\n        const pageNumber = btn ? btn.getAttribute('data-page') : e.target.getAttribute('data-page');\n        this.currentPage = Number(pageNumber) || 0;\n\n        if(window.jplist) {\n\n            window.jplist.refresh(this.group, control);\n        }\n    }\n\n    /**\n     * on items per page select change\n     * @param {object} e\n     * @param {HTMLElement} select\n     * @param {BasePaginationControl} basePaginationControl\n     */\n    selectChange(e, select, basePaginationControl){\n\n        e.preventDefault();\n\n        const itemsPerPage = Number(e.target.value);\n\n        if(!isNaN(itemsPerPage)){\n\n            this.itemsPerPage = itemsPerPage;\n\n            //update the selected values of all controls\n            for(let control of this.controls){\n                this.updateItemsPerPageSelect(control.itemsPerPageSelects);\n            }\n        }\n\n        if(window.jplist) {\n\n            window.jplist.refresh(this.group, basePaginationControl);\n        }\n    }\n\n    // --------------------- DEEP LINK ---------------------\n\n    /**\n     * restore control state from the deep link value\n     * @param {BasePaginationControl} basePaginationControl\n     */\n    restoreFromDeepLink(basePaginationControl){\n\n        if(basePaginationControl.id){\n\n            this.id = basePaginationControl.id;\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === basePaginationControl.id);\n\n            if(deepLinkParam){\n\n                const parts = deepLinkParam.value.split('-');\n\n                if(parts.length !== 2) return;\n\n                const currentPage = Number(parts[0]);\n                const itemsPerPage = Number(parts[1]);\n\n                if(isNaN(currentPage) || isNaN(itemsPerPage)) return;\n\n                this.currentPage = currentPage;\n                this.itemsPerPage = itemsPerPage;\n            }\n        }\n    }\n\n    /**\n     * by default control's deep link is empty\n     * @returns {string}\n     */\n    getDeepLink(){\n\n        if(this.id){\n            return this.id + '=' + this.currentPage + '-' + this.itemsPerPage;\n        }\n\n        return '';\n    }\n\n    // --------------------- HELPERS ---------------------\n\n    /**\n     * update page button attributes and styles of the elements collection\n     * @param {HTMLCollection} items\n     * @param {number} page\n     * @param {boolean} isEnabled\n     * @param {string} disabledClass\n     */\n    static setPageAttr(items, page, isEnabled, disabledClass){\n\n        if(!items) return;\n\n        for(let item of items){\n            item.setAttribute('data-page', page);\n\n            if(isEnabled){\n                item.classList.remove(disabledClass);\n            }\n            else{\n                item.classList.add(disabledClass);\n            }\n        }\n    }\n\n    /**\n     * bind event handler to the items collection\n     * @param {HTMLCollection} items\n     * @param {string} eventName\n     * @param {Function} func\n     * @param {BasePaginationControl} basePaginationControl\n     */\n    static bindEventHandler(items, eventName, func, basePaginationControl){\n\n        if(!items) return;\n\n        for(let item of items){\n            item.addEventListener(eventName, (e) => {func(e, item, basePaginationControl); });\n        }\n    }\n}\n\nexport default PaginationControl;","import BaseControlsGroup from '../base/groups/base-controls-group';\n\n/**\n * reset control\n */\nclass ResetControl extends BaseControlsGroup{\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BaseControl|null}\n     */\n    addControl(control){\n\n        super.addControl(control);\n\n        /**\n         * on button click\n         */\n        control.element.addEventListener('click', (e) => {\n\n            e.preventDefault();\n\n            if(window.jplist) {\n\n                window.jplist.resetControls(this.group, control);\n            }\n\n        }, false);\n    }\n\n}\n\nexport default ResetControl;","import BaseSortControlsGroup from '../../base/groups/sort/base-sort-controls-group';\n\nconst SELECTED_CLASS = 'jplist-selected';\n\n/**\n * sort buttons jPList control\n *\n * Usage:\n * <button\n *  data-jplist-control=\"sort-buttons\"\n *  data-path=\".title\"          <!-- required -->\n *  data-group=\"group1\"         <!-- required -->\n *  data-order=\"asc\"            <!-- optional, asc (default) / desc -->\n *  data-type=\"text\"            <!-- optional, text (default) / number / datetime -->\n *  data-name=\"sort1\"           <!-- required for radio mode -->\n *  data-selected=\"true\"        <!-- optional, true / false (default) -->\n *  data-datetime-format=\"{month}/{day}/{year}\" <!-- optional -->\n *  data-regex=\"\"               <!-- optional -->\n *  data-id=\"deep-link-name1\"   <!-- optional, used as deep link url and storage parameter -->\n *  data-mode=\"radio\">          <!-- optional, radio (default) / checkbox -->\n *  Sort by title asc\n * </button>\n *\n * Optional deep link: #deepLinkName1=1&deepLinkName2=1\n * selected value - 1\n * non selected - should not appear in deep link or any value !== 1\n */\nclass ButtonsSortControl extends BaseSortControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n\n        this.checkboxes = [];\n        this.radios = [];\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseSortControl} control\n     */\n    addControl(control){\n\n        const baseSortControl = super.addControl(control);\n\n        //get additional control properties\n        baseSortControl.selected = baseSortControl.element.getAttribute('data-selected') === 'true';\n        baseSortControl.mode = baseSortControl.element.getAttribute('data-mode') || 'radio';\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseSortControl.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseSortControl.id);\n\n            if(deepLinkParam){\n                baseSortControl.selected = deepLinkParam.value === '1';\n            }\n        }\n\n        if(baseSortControl.mode === 'radio'){\n\n            this.radios.push(baseSortControl);\n            this.handleRadios();\n        }\n\n        if(baseSortControl.mode === 'checkbox'){\n\n            this.checkboxes.push(baseSortControl);\n            this.handleCheckboxes();\n        }\n\n        /**\n         * on control click -> change the selected control\n         */\n        baseSortControl.element.addEventListener('click', e => {\n\n            e.preventDefault();\n\n            if(baseSortControl.mode === 'checkbox'){\n\n                baseSortControl.selected = !baseSortControl.selected;\n\n                this.checkboxes.forEach(cb => {\n\n                    if(cb.isEqualTo(baseSortControl)){\n                        cb.selected = baseSortControl.selected;\n                    }\n                });\n\n                this.handleCheckboxes();\n            }\n\n            if(baseSortControl.mode === 'radio'){\n\n                for (let radio of this.radios) {\n                    radio.selected = false;\n                }\n\n                baseSortControl.selected = true;\n\n                this.handleRadios();\n            }\n\n            if(window.jplist) {\n\n                window.jplist.refresh(this.group, baseSortControl);\n            }\n        });\n    }\n\n    /**\n     * handle checkbox mode controls\n     */\n    handleCheckboxes(){\n\n        for(let cb of this.checkboxes){\n\n            if(cb.selected){\n                cb.element.classList.add(SELECTED_CLASS);\n            }\n            else{\n                cb.element.classList.remove(SELECTED_CLASS);\n            }\n        }\n    }\n\n    /**\n     * get the latest selected radio\n     * @return {BaseSortControl} latestSelectedRadio\n     */\n    getLastSelectedRadio(){\n\n        let latestSelectedRadio = null;\n\n        //find the latest selected radio\n        for (let radio of this.radios) {\n\n            if (radio.selected) {\n                latestSelectedRadio = radio;\n            }\n        }\n\n        return latestSelectedRadio;\n    }\n\n    /**\n     * handle radio mode controls\n     */\n    handleRadios(){\n\n        if(this.radios.length > 0) {\n\n            let latestSelectedRadio = this.getLastSelectedRadio();\n\n            //remove selected from all radios\n            for (let radio of this.radios) {\n\n                radio.selected = false;\n                radio.element.classList.remove(SELECTED_CLASS);\n            }\n\n            if(latestSelectedRadio) {\n\n                this.radios.forEach(radio => {\n\n                    if(radio.isEqualTo(latestSelectedRadio)){\n                        radio.selected = true;\n                        radio.element.checked = true;\n                        radio.element.classList.add(SELECTED_CLASS);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * get sort options from all controls in the group\n     * @return {Array.<object>} sortOptions\n     */\n    getSortOptions(){\n\n        let sortOptions = [];\n\n        let atLeastOneNotSelectedCheckbox = false;\n\n        //add all selected checkboxes\n        for(let checkbox of this.checkboxes){\n\n            if(checkbox.selected) {\n                sortOptions = sortOptions.concat(checkbox.getSortOptions());\n            }\n            else{\n                atLeastOneNotSelectedCheckbox = true;\n            }\n        }\n\n        if(atLeastOneNotSelectedCheckbox){\n            sortOptions = sortOptions.concat([\n                {\n                    path: 'default'\n                }\n            ]);\n        }\n\n        //get options from the latest selected radio if exists\n        let latestSelectedRadio = this.getLastSelectedRadio();\n\n        if(latestSelectedRadio){\n            sortOptions = sortOptions.concat(latestSelectedRadio.getSortOptions());\n        }\n\n        return sortOptions;\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n        const cbArr = this.checkboxes.map(cb => cb.id && cb.selected ? cb.id + '=1' : '').filter(str => str !== '');\n        const radioArr = this.radios.map(radio => radio.id && radio.selected ? radio.id + '=1' : '').filter(str => str !== '');\n        const combined = cbArr.concat(radioArr);\n        const unique = Array.from(new Set(combined));\n        return unique.join('&');\n    }\n}\n\nexport default ButtonsSortControl;","import BaseSortControlsGroup from '../../base/groups/sort/base-sort-controls-group';\n\nconst SELECTED_CLASS = 'jplist-selected';\n\n/**\n * checkbox sort control\n *\n * Usage:\n * <label>\n *  <input\n *      type=\"checkbox\"\n *      data-jplist-control=\"checkbox-sort\"\n *      data-path=\".title\"           <!-- required -->\n *      data-group=\"group1\"          <!-- required -->\n *      data-order=\"asc\"             <!-- optional, asc (default) / desc -->\n *      data-type=\"text\"             <!-- optional, text (default) / number / datetime -->\n *      data-datetime-format=\"{month}/{day}/{year}\" <!-- optional -->\n *      data-regex=\"\"                <!-- optional -->\n *      data-id=\"deep-link-name1\"    <!-- optional, used as deep link url and storage parameter -->\n *      checked>\n *          Sort by title asc\n *  </input>\n * </label>\n * Optional deep link: #deepLinkName1=1\n * selected value - 1\n * non selected - 0\n */\nclass CheckboxSortControl extends BaseSortControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n\n        this.checkboxes = [];\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseSortControl} control\n     */\n    addControl(control){\n\n        const baseSortControl = super.addControl(control);\n\n        //get additional control properties\n        baseSortControl.selected = baseSortControl.element.checked;\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseSortControl.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseSortControl.id);\n\n            if(deepLinkParam){\n                baseSortControl.selected = deepLinkParam.value === '1';\n            }\n        }\n\n        this.checkboxes.push(baseSortControl);\n        this.handleCheckboxes();\n\n        /**\n         * on control change -> update the selected control\n         */\n        baseSortControl.element.addEventListener('change', e => {\n\n            e.preventDefault();\n\n            baseSortControl.selected = !baseSortControl.selected;\n\n            this.checkboxes.forEach(cb => {\n\n                if(cb.isEqualTo(baseSortControl)){\n                    cb.selected = baseSortControl.selected;\n                }\n            });\n\n            this.handleCheckboxes();\n\n            if(window.jplist) {\n\n                window.jplist.refresh(this.group, baseSortControl);\n            }\n        });\n    }\n\n    /**\n     * handle checkbox mode controls\n     */\n    handleCheckboxes(){\n\n        for(let cb of this.checkboxes){\n\n            if(cb.selected){\n                cb.element.classList.add(SELECTED_CLASS);\n            }\n            else{\n                cb.element.classList.remove(SELECTED_CLASS);\n            }\n\n            cb.element.checked = cb.selected;\n        }\n    }\n\n    /**\n     * get sort options from all controls in the group\n     * @return {Array.<object>} sortOptions\n     */\n    getSortOptions(){\n\n        let sortOptions = [];\n\n        let atLeastOneNotSelectedCheckbox = false;\n\n        //add all selected checkboxes\n        for(let checkbox of this.checkboxes){\n\n            if(checkbox.selected) {\n                sortOptions = sortOptions.concat(checkbox.getSortOptions());\n            }\n            else{\n                atLeastOneNotSelectedCheckbox = true;\n            }\n        }\n\n        //any number of non selected checkboxes -> 1 default option\n        if(atLeastOneNotSelectedCheckbox){\n            sortOptions = sortOptions.concat([\n                {\n                    path: 'default'\n                }\n            ]);\n        }\n\n        return sortOptions;\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n        const cbArr = this.checkboxes.map(cb => {\n\n            if(cb.id){\n                return cb.selected ? cb.id + '=1' : cb.id + '=0';\n            }\n            else{\n                return '';\n            }\n\n        }).filter(str => str !== '');\n\n        const unique = Array.from(new Set(cbArr));\n        return unique.join('&');\n    }\n}\n\nexport default CheckboxSortControl;","import BaseSortControlsGroup from '../../base/groups/sort/base-sort-controls-group';\nimport BaseSortControl from '../../base/controls/sort/base-sort.control';\nimport BaseDropdownControl from '../../base/controls/dropdown/base-dropdown.control';\n\n/**\n * dropdown sort control\n */\nclass DropdownSortControl extends BaseSortControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n        this.selected = null;\n        this.id = '';\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseSortControl} control\n     */\n    addControl(control){\n\n        //a dropdown has the following custom properties:\n        //  -- dropdown - custom dropdown behaviour, styles, classes\n        //  -- buttons - the list of dropdown buttons, each of them is BaseSortControl\n        const baseSortControl = super.addControl(control);\n\n        //generate dropdown instance for the given control;\n        //this instance adds dropdown classes, styles and behaviour\n        baseSortControl.dropdown = new BaseDropdownControl(control.element);\n        baseSortControl.buttons = [];\n\n        //each button inside dropdown is a separate sort control that defined by data-path attribute;\n        //they are stored in baseSortControl.buttons array\n        let buttons = baseSortControl.element.querySelectorAll('[data-path]');\n\n        for(let button of buttons){\n\n            //all buttons inherits data-name and data-group attributes of the root dropdown\n            button.setAttribute('data-name', this.name);\n            button.setAttribute('data-group', this.group);\n            button.setAttribute('data-jump', baseSortControl.jump);\n\n            let btnSortControl = new BaseSortControl(button);\n\n            //save newly created button in the baseSortControl.buttons array\n            baseSortControl.buttons.push(btnSortControl);\n\n            /**\n             * on control button click -> update the selected control\n             */\n            btnSortControl.element.addEventListener('click', e => {\n\n                e.preventDefault();\n\n                //clicked button should be the selected one\n                this.selected = btnSortControl;\n\n                this.setSelectedButton(baseSortControl);\n\n                for(let control of this.controls){\n                    if(control.dropdown){\n                        control.dropdown.close();\n                    }\n                }\n\n                if(window.jplist) {\n\n                    window.jplist.refresh(this.group, btnSortControl);\n                }\n            });\n        }\n\n        this.selected = DropdownSortControl.getSelectedButton(baseSortControl.buttons);\n        this.setSelectedButton(baseSortControl);\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseSortControl.id){\n\n            this.id = baseSortControl.id;\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseSortControl.id);\n\n            if(deepLinkParam){\n\n                const deepLinkBtn = baseSortControl.buttons.find(btn => {\n\n                    const btnValue = btn.element.getAttribute('data-value');\n                    return (deepLinkParam.value === btnValue) ? btn : null;\n                });\n\n                if(deepLinkBtn) {\n                    this.selected = deepLinkBtn;\n                    this.setSelectedButton(baseSortControl);\n                }\n            }\n        }\n    }\n\n    /**\n     * get sort options from all controls in the group\n     * @return {Array.<object>} sortOptions\n     */\n    getSortOptions(){\n\n        if(this.selected){\n            return this.selected.getSortOptions();\n        }\n\n        return [];\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n\n        if(this.id && this.selected){\n            return this.id + '=' + this.selected.element.getAttribute('data-value') || '';\n        }\n\n        return '';\n    }\n\n    /**\n     * get selected button that has data-selected=\"true\" data attribute;\n     * if there is no data-selected attribute -> take the first button\n     * @param {Array.<BaseSortControl>} buttons\n     * @return {BaseSortControl|null}\n     */\n    static getSelectedButton(buttons){\n\n        if(buttons.length <= 0) return null;\n\n        for(let button of buttons){\n            if(button.element.getAttribute('data-selected') === 'true'){\n                return button;\n            }\n        }\n\n        return buttons[0];\n    }\n\n    /**\n     * set selected button\n     * @param {BaseSortControl} baseSortControl\n     */\n    setSelectedButton(baseSortControl){\n\n        for(let control of this.controls){\n\n            if(!control.dropdown) continue;\n\n            //verify that dropdown has such button\n            const dropdownBtn = baseSortControl.buttons.find(btn => this.selected.isEqualTo(btn));\n\n            if(dropdownBtn){\n\n                //update dropdown panels value\n                control.dropdown.setPanelsContent(dropdownBtn.element.textContent);\n            }\n        }\n    }\n}\n\nexport default DropdownSortControl;","import BaseSortControlsGroup from '../../base/groups/sort/base-sort-controls-group';\n\n/**\n * hidden sort jPList control\n *\n * HTML structure:\n * ----------------\n * <div\n *      style=\"display: none\"\n *      data-jplist-control=\"hidden-sort\"\n *      data-group=\"group1\"\n *      data-path=\".title\"\n *      data-type=\"number\"> <!-- possible values: text, number, datetime -->\n * </div>\n *\n * Usage in JS:\n * -------------\n * import HiddenSort from './controls/sort/hidden-sort.control';\n * let control = document.getElementById('my-hidden-sort-control');\n * const hiddenSort = new HiddenSort(control);\n * console.log(hiddenSort.type);\n */\nclass HiddenSortControl extends BaseSortControlsGroup{}\n\nexport default HiddenSortControl;\n","import BaseSortControlsGroup from '../../base/groups/sort/base-sort-controls-group';\n\nconst SELECTED_CLASS = 'jplist-selected';\n\n/**\n * radio buttons sort control\n *\n * Usage:\n * <label>\n *  <input\n *      type=\"radio\"\n *      data-jplist-control=\"radio-buttons-sort\"\n *      data-path=\".title\"           <!-- required -->\n *      data-group=\"group1\"          <!-- required -->\n *      data-order=\"asc\"             <!-- optional, asc (default) / desc -->\n *      data-type=\"text\"             <!-- optional, text (default) / number / datetime -->\n *      data-datetime-format=\"{month}/{day}/{year}\" <!-- optional -->\n *      data-regex=\"\"                <!-- optional -->\n *      data-id=\"deep-link-name1\"    <!-- optional, used as deep link url and storage parameter -->\n *      name=\"sort1\"\n *      checked>\n *          Sort by title asc\n *  </input>\n * </label>\n *\n * Optional deep link: #deepLinkName1=1\n * selected value - 1\n * non selected - should not appear in deep link\n */\nclass RadioButtonsSortControl extends BaseSortControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n        this.radios = [];\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseSortControl} control\n     */\n    addControl(control){\n\n        const baseSortControl = super.addControl(control);\n\n        //get additional control properties\n        baseSortControl.selected = baseSortControl.element.checked;\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseSortControl.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseSortControl.id);\n\n            if(deepLinkParam){\n                baseSortControl.selected = deepLinkParam.value === '1';\n            }\n        }\n\n        this.radios.push(baseSortControl);\n        this.handleRadios();\n\n        /**\n         * on control change -> update the selected control\n         */\n        baseSortControl.element.addEventListener('change', e => {\n\n            e.preventDefault();\n\n            for (let radio of this.radios) {\n                radio.selected = false;\n            }\n\n            baseSortControl.selected = true;\n\n            this.handleRadios();\n\n            if(window.jplist) {\n\n                window.jplist.refresh(this.group, baseSortControl);\n            }\n        });\n    }\n\n    /**\n     * get the latest selected radio\n     * @return {BaseSortControl} latestSelectedRadio\n     */\n    getLastSelectedRadio(){\n\n        let latestSelectedRadio = null;\n\n        //find the latest selected radio\n        for (let radio of this.radios) {\n\n            if (radio.selected) {\n                latestSelectedRadio = radio;\n            }\n        }\n\n        return latestSelectedRadio;\n    }\n\n    /**\n     * handle radio mode controls\n     */\n    handleRadios(){\n\n        if(this.radios.length > 0) {\n\n            let latestSelectedRadio = this.getLastSelectedRadio();\n\n            //remove selected from all radios\n            for (let radio of this.radios) {\n\n                radio.selected = false;\n                radio.element.classList.remove(SELECTED_CLASS);\n            }\n\n            if(latestSelectedRadio) {\n\n                this.radios.forEach(radio => {\n\n                    if(radio.isEqualTo(latestSelectedRadio)){\n\n                        radio.selected = true;\n                        radio.element.checked = true;\n                        radio.element.classList.add(SELECTED_CLASS);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * get sort options from all controls in the group\n     * @return {Array.<object>} sortOptions\n     */\n    getSortOptions(){\n\n        let sortOptions = [];\n\n        //get options from the latest selected radio if exists\n        let latestSelectedRadio = this.getLastSelectedRadio();\n\n        if(latestSelectedRadio){\n            sortOptions = sortOptions.concat(latestSelectedRadio.getSortOptions());\n        }\n\n        return sortOptions;\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n        const radioArr = this.radios.map(radio => radio.id && radio.selected ? radio.id + '=1' : '').filter(str => str !== '');\n        const unique = Array.from(new Set(radioArr));\n        return unique.join('&');\n    }\n}\n\nexport default RadioButtonsSortControl;","import BaseSortControlsGroup from '../../base/groups/sort/base-sort-controls-group';\nimport BaseSortControl from '../../base/controls/sort/base-sort.control';\n\n/**\n * select sort control\n *  <select\n *        data-jplist-control=\"select-sort\"\n *        data-group=\"group1\"\n *        data-name=\"name1\"\n *        data-id=\"deep-link-name1\">  <!-- optional, used as deep link url and storage parameter -->\n *\n *        <option\n *          data-path=\"default\"\n *          value=\"0\"\n *          selected>Sort by</option>\n *\n *        <option\n *          value=\"1\"\n *          data-path=\".title\"\n *          data-order=\"asc\"\n *          data-type=\"text\">Title A-Z</option>\n *\n *        <option\n *          value=\"2\"\n *          data-path=\".title\"\n *          data-order=\"desc\"\n *          data-type=\"text\">Title Z-A</option>\n *    </select>\n *\n *    option may have the following attributes:\n *    ------------------------------------------\n *    data-path - required CSS path selector\n *    data-order - optional, asc (default) / desc\n *    data-type=\"text\" - optional, text (default) / number / datetime\n *    data-datetime-format=\"{month}/{day}/{year}\" - optional datetime format\n *    data-regex -  optional ignore regex\n */\nclass SelectSortControl extends BaseSortControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n\n        this.options = [];\n        this.selected = '';\n        this.id = '';\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseSortControl} control\n     */\n    addControl(control){\n\n        const baseSortControl = super.addControl(control);\n\n        let options = baseSortControl.element.querySelectorAll('option');\n\n        for(let option of options){\n\n            option.setAttribute('data-name', this.name);\n            option.setAttribute('data-group', this.group);\n\n            if(!this.options.find(opt => opt.element.value === option.value)){\n                this.options.push(new BaseSortControl(option));\n            }\n        }\n\n        this.selected = baseSortControl.element.value;\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseSortControl.id){\n\n            this.id = baseSortControl.id;\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseSortControl.id);\n\n            if(deepLinkParam){\n                baseSortControl.element.value = deepLinkParam.value;\n                this.selected = deepLinkParam.value;\n            }\n        }\n\n        /**\n         * on control change -> update the selected control\n         */\n        baseSortControl.element.addEventListener('change', e => {\n\n            e.preventDefault();\n\n            this.selected = e.target.value;\n\n            for(let select of this.controls){\n                select.element.value = this.selected;\n            }\n\n            if(window.jplist) {\n\n                window.jplist.refresh(this.group, baseSortControl);\n            }\n        });\n    }\n\n    /**\n     * get sort options from all controls in the group\n     * @return {Array.<object>} sortOptions\n     */\n    getSortOptions(){\n\n        let selected = this.options.find(opt => opt.element.value === this.selected);\n\n        if(selected){\n            return selected.getSortOptions();\n        }\n\n        return [];\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n\n        let selected = this.options.find(opt => opt.element.value === this.selected);\n\n        if(this.id){\n            return this.id + '=' + selected.element.value;\n        }\n\n        return '';\n    }\n}\n\nexport default SelectSortControl;","import ContentManager from './content/content-manager';\nimport BaseControl from \"./controls/base/controls/base.control\";\n\n/**\n * the main jPList class\n */\nexport default class jPList{\n\n    /**\n     * API: initialize jPList controls + elements from outside\n     * @param {Object} options\n     */\n    init(options){\n\n        this.settings = Object.assign({}, {\n\n            //storage\n            storage: '', //'', 'localStorage', 'sessionStorage', 'cookies'\n            storageName: 'jplist',\n            cookiesExpiration: -1, //cookies expiration in minutes (-1 = cookie expires when browser is closed)\n\n            //deep links\n            deepLinking: false,\n            hashStart: '#' //the start of the hash part, for example it may be '#!key='\n\n        }, options);\n\n        //find all controls split by data-group and data-name\n        this.controls = ContentManager.splitByGroupAndName(this.settings, document.body);\n\n        //find all jplist groups\n        this.elements = document.querySelectorAll('[data-jplist-group]');\n\n        //get from each group the data about its root and items;\n        //the received structure is: Map[groupName, Array.<{root: HTMLElement, items: Array.<HTMLElement>}>]\n        this.groups = ContentManager.findGroups(this.elements);\n\n        let items = [...document.querySelectorAll('[data-jplist-item]')];\n\n        //set jPList index for every element\n        //it's used to return to the default browser sorting if needed\n        for(let jplistIndex = 0; jplistIndex < items.length; jplistIndex++){\n\n            items[jplistIndex].jplistIndex = jplistIndex;\n        }\n\n        //first refresh\n        this.refresh('');\n    }\n\n    /**\n     * API: apply controls on content\n     * @param {string=} groupName - optional group name\n     * @param {BaseControl|undefined=} target - the element that triggered the event\n     */\n    refresh(groupName = '', target = undefined){\n        ContentManager.apply(this.settings, this.controls, this.groups, groupName, target);\n    }\n\n    /**\n     * API: reset control by CSS selector and apply it on content\n     * @param {HTMLElement} element\n     */\n    resetControl(element){\n\n        if(!element) return;\n\n        if(this.controls) {\n\n            for (let [groupName, groupControls] of this.controls) {\n                for (let group of groupControls) {\n                    let controlIndex = group.controls.findIndex(control => control.element === element);\n\n                    if(controlIndex >= 0){\n\n                        //find the control\n                        const control = group.controls[controlIndex];\n                        const oldElement = control.element;\n\n                        //create HTML element from outer HTML string\n                        const div = document.createElement('div');\n                        div.innerHTML = oldElement.initialHTML;\n                        const newElement = div.firstChild;\n\n                        if(oldElement.parentNode) {\n\n                            //replace HTML element in the DOM\n                            oldElement.parentNode.replaceChild(newElement, oldElement);\n\n                            //replace the control in the group\n                            group.controls.splice(controlIndex, 1);\n                            group.addControl(new BaseControl(newElement));\n\n                            //update state\n                            this.refresh(groupName);\n                        }\n\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * API: reset all jplist controls and apply them on content\n     * @param {string=} groupName\n     */\n    resetControls(groupName = ''){\n\n        if(this.controls) {\n\n            //this.controls is a Map: [groupName, [BaseControlsGroup1, BaseControlsGroup2, ...]]\n            for (let [groupName, groupControls] of this.controls) {\n\n                for (let group of groupControls) {\n\n                    for(let control of group.controls){\n\n                        if (!control.element || !control.element.initialHTML) continue;\n\n                        control.element.outerHTML = control.element.initialHTML;\n\n                    }\n                }\n            }\n        }\n\n        //find all controls split by data-group and data-name\n        this.controls = ContentManager.splitByGroupAndName(this.settings, document.body);\n\n        this.refresh(groupName);\n    }\n\n    /**\n     * API: refresh HTML content after add / remove items\n     * @param {Function} updateContentFunc\n     */\n    resetContent(updateContentFunc){\n\n        for(let [cGroupName, groupValueArr] of this.groups){\n\n            for(let itemsBlock of groupValueArr) {\n\n                //hide all elements moving them to the document fragment\n                let fragment = ContentManager.getItemsFragment(itemsBlock.items);\n\n                itemsBlock.root.appendChild(fragment);\n            }\n        }\n\n        if(updateContentFunc){\n            updateContentFunc(this.groups);\n        }\n\n        //find all jplist groups\n        this.elements = document.querySelectorAll('[data-jplist-group]');\n\n        //get from each group the data about its root and items;\n        //the received structure is: Map[groupName, Array.<{root: HTMLElement, items: Array.<HTMLElement>}>]\n        this.groups = ContentManager.findGroups(this.elements);\n\n        let items = [...document.querySelectorAll('[data-jplist-item]')];\n\n        //set jPList index for every element\n        //it's used to return to the default browser sorting if needed\n        for(let jplistIndex = 0; jplistIndex < items.length; jplistIndex++){\n\n            items[jplistIndex].jplistIndex = jplistIndex;\n        }\n\n        //first refresh\n        this.refresh('');\n\n    }\n\n}","class DeepLinksService{\n\n    /**\n     * take param1=val1 and return an object of the structure { key: param1, value: val1 }\n     * @param param {string}\n     * @return {object|null}\n     */\n    static getParam(param){\n\n        if(!param) return null;\n\n        const parts = param.split('=');\n\n        if(parts.length < 2) return null;\n\n        return {\n            key: parts[0].trim().toLowerCase(),\n            value: parts[1].trim().toLowerCase()\n        };\n    }\n\n    /**\n     * get deep link parameters from URL\n     * @param {string} hash - window.location.hash value\n     * @param {string=} hashStart - optional value of hash start; by default it's '#', but can be changed for example to be '#!'\n     * @return {Map} params - structure: [groupName, [{key, value}, ...]], ...\n     *\n     * URL structure example:\n     * https://www.example.com?param1=val1&param2=val2#group=gr1&param1=val1&param2=val2&group=gr2&param1=val1&param2=val2...\n     */\n    static getUrlParams(hash, hashStart = '#'){\n\n        const paramsMap = new Map();\n\n        if(!hash) return paramsMap;\n\n        const formattedHash = window.decodeURIComponent(hash.replace(hashStart, '')).trim().toLowerCase();\n\n        if(!formattedHash) return paramsMap;\n\n        const params = formattedHash.split('&');\n\n        let currentGroupName = '';\n\n        for(let pair of params){\n\n            const param = DeepLinksService.getParam(pair);\n\n            if(!param) continue;\n\n            if(param.key === 'group'){\n\n                currentGroupName = param.value;\n\n                //insert group name if doesn't exist\n                if(!paramsMap.has(param.value)){\n\n                    paramsMap.set(param.value, []);\n                }\n            }\n            else{\n                const groupValues = paramsMap.get(currentGroupName);\n\n                if(groupValues){\n                    groupValues.push(param);\n                }\n\n                paramsMap.set(currentGroupName, groupValues);\n            }\n        }\n\n        return paramsMap;\n    }\n}\n\nexport default DeepLinksService;","/**\n * local storage, session storage, cookies\n */\nclass StorageService{\n\n    /**\n     * is storage supported?\n     * @param {string} storage - 'localStorage', 'sessionStorage', 'cookies'\n     * @return {boolean}\n     */\n    static isSupported(storage){\n\n        if(storage === 'cookies') return true;\n\n        try{\n            return storage in window && window[storage] !== null;\n        }\n        catch(e){\n            return false;\n        }\n    }\n\n    /**\n     * save to the storage\n     * @param {string} deepLink\n     * @param {string} storage - 'localStorage', 'sessionStorage', 'cookies'\n     * @param {string} key - storage key\n     * @param {number} expiration - cookie expiration in minutes (-1 = cookies expire when browser is closed)\n     */\n    static set(deepLink, storage, key, expiration = -1){\n\n        if(storage === 'cookies'){\n\n            const cValue = encodeURIComponent(deepLink);\n            const exdate = new Date();\n\n            expiration = Number(expiration) || -1;\n\n            if(expiration === -1){\n                document.cookie = name + '=' + cValue + ';path=/;';\n            }\n            else{\n                exdate.setMinutes(exdate.getMinutes() + expiration);\n                document.cookie = name + '=' + cValue + ';path=/; expires=' + exdate.toUTCString();\n            }\n        }\n        else{\n            if(StorageService.isSupported(storage)) {\n\n                //save json in storage\n                window[storage][key] = deepLink;\n            }\n        }\n    }\n\n    /**\n     * get from storage\n     * @param {string} storage - 'localStorage', 'sessionStorage', 'cookies'\n     * @param {string} key - storage key\n     * @return {string} deepLink\n     */\n    static get(storage, key){\n\n        let deepLink = '';\n\n        if(storage === 'cookies'){\n\n            //get document cookie\n            const cookies = document.cookie.split(';');\n\n            for (let i=0; i<cookies.length; i++){\n\n                let x = cookies[i].substr(0,cookies[i].indexOf('='));\n                let y = cookies[i].substr(cookies[i].indexOf('=') + 1);\n                x = x.replace(/^\\s+|\\s+$/g, '');\n\n                if(x === key){\n                    deepLink = decodeURIComponent(y);\n                    break;\n                }\n            }\n        }\n        else{\n            if(StorageService.isSupported(storage)) {\n                deepLink = window[storage][key] || '';\n            }\n        }\n\n        return deepLink;\n    }\n\n}\n\nexport default StorageService;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*\n\n           |----\n           |  /\n           |  \\\n           |----\n           |\n          /*\\\n         // \\\\\n        //   \\\\\n       //=====\\\\\n      //       \\\\\n----| |=========| |----\n \\  | |         | |  /\n /  | |    []   | |  \\\n----| |         | |----\n    | |    []   | |\n   /=\\|         |/=\\\n  //=\\\\    []   //=\\\\\n //===\\\\       //===\\\\\n//=====\\\\     //=====\\\\\n||=====||=====||=====||\n-----------------------\n|||||||||||||||||||||||\n-----------------------\n||       *****       ||\n||      |||||||      ||\n||     ||  |  ||     ||\n||    ||   |   ||    ||\n||    ||  (|)  ||    ||\n||   ||    |    ||   ||\n||   ||    |    ||   ||\n**===================**/\n\nimport jPList from './jplist';\n\n//sort\nimport HiddenSortControl from './controls/sort/hidden-sort/hidden-sort.control';\nimport ButtonsSortControl from './controls/sort/buttons-sort/buttons-sort.control';\nimport RadioButtonsSortControl from './controls/sort/radio-buttons-sort/radio-buttons-sort.control';\nimport CheckboxSortControl from './controls/sort/checkbox-sort/checkbox-sort.control';\nimport SelectSortControl from './controls/sort/select-sort/select-sort.control';\nimport DropdownSortControl from './controls/sort/dropdown-sort/dropdown-sort.control';\n\n//pagination\nimport PaginationControl from './controls/pagination/pagination.control';\n\n//text filter\nimport TextboxFilterControl from './controls/filter/text-filters/textbox-filter/textbox-filter.control';\nimport CheckboxTextFilterControl from './controls/filter/text-filters/checkbox-text-filter/checkbox-text-filter.control';\nimport RadioButtonsTextFilterControl from './controls/filter/text-filters/radio-buttons-text-filter/radio-buttons-text-filter.control';\nimport ButtonsTextFilterControl from './controls/filter/text-filters/buttons-text-filter/buttons-text-filter.control';\n\n//path filter\nimport SelectFilterControl from './controls/filter/path-filters/select-filter/select-filter.control';\nimport CheckboxPathFilterControl from './controls/filter/path-filters/checkbox-path-filter/checkbox-path-filter.control';\nimport RadioButtonsPathFilterControl from './controls/filter/path-filters/radio-buttons-path-filter/radio-buttons-path-filter.control';\nimport ButtonsPathFilterControl from './controls/filter/path-filters/buttons-path-filter/buttons-path-filter.control';\nimport DropdownFilterControl from './controls/filter/path-filters/dropdown-filter/dropdown-filter.control';\n\n//range filter\nimport ButtonsRangeFilter from './controls/filter/range-filters/buttons-range-filter/buttons-range-filter.control';\nimport RangeSliderFilter from './controls/filter/range-filters/slider-range-filter/slider-range-filter.control';\n\n//other\nimport NoResultsControl from './controls/no-results/no-results.control';\nimport DropdownControl from './controls/base/controls/dropdown/base-dropdown.control';\nimport LayoutControl from './controls/layout/layout.control';\nimport ResetControl from './controls/reset/reset.control';\nimport CounterControl from './controls/counter/counter.control';\n\n(() => {\n    'use strict';\n\n    //custom events polyfill for IE 10+\n    //https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent\n    if (typeof window.CustomEvent !== 'function' ){\n\n        const CustomEvent = (event, params) => {\n            params = params || { bubbles: false, cancelable: false, detail: undefined };\n            var evt = document.createEvent( 'CustomEvent' );\n            evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );\n            return evt;\n        };\n\n        CustomEvent.prototype = window.Event.prototype;\n        window.CustomEvent = CustomEvent;\n    }\n\n    /**\n     * global jplist function, one per page\n     */\n    window.jplist = window.jplist || {};\n\n    /**\n     * registered control types\n     * @type {Map}\n     */\n    window.jplist.controlTypes = window.jplist.controlTypes || new Map([\n        ['hidden-sort', HiddenSortControl],\n        ['sort-buttons', ButtonsSortControl],\n        ['radio-buttons-sort', RadioButtonsSortControl],\n        ['checkbox-sort', CheckboxSortControl],\n        ['select-sort', SelectSortControl],\n        ['dropdown-sort', DropdownSortControl],\n\n        ['pagination', PaginationControl],\n\n        ['textbox-filter', TextboxFilterControl],\n        ['checkbox-text-filter', CheckboxTextFilterControl],\n        ['radio-buttons-text-filter', RadioButtonsTextFilterControl],\n        ['buttons-text-filter', ButtonsTextFilterControl],\n\n        ['select-filter', SelectFilterControl],\n        ['dropdown-filter', DropdownFilterControl],\n        ['checkbox-path-filter', CheckboxPathFilterControl],\n        ['radio-buttons-path-filter', RadioButtonsPathFilterControl],\n        ['buttons-path-filter', ButtonsPathFilterControl],\n\n        ['buttons-range-filter', ButtonsRangeFilter],\n        ['slider-range-filter', RangeSliderFilter],\n\n        ['no-results', NoResultsControl],\n        ['dropdown', DropdownControl],\n        ['layout', LayoutControl],\n        ['reset', ResetControl],\n        ['counter', CounterControl]\n    ]);\n\n    let jplist = new jPList();\n\n    /**\n     * external api\n     */\n    window.jplist.init = jplist.init.bind(jplist);\n    window.jplist.refresh = jplist.refresh.bind(jplist);\n    window.jplist.resetControls = jplist.resetControls.bind(jplist);\n    window.jplist.resetControl = jplist.resetControl.bind(jplist);\n    window.jplist.resetContent = jplist.resetContent.bind(jplist);\n})();"],"names":["FilterAction","items","text","path","mode","ignoreRegex","filtered","formattedText","replace","RegExp","toLowerCase","trim","item","elements","querySelectorAll","shouldBeAdded","el","elText","textContent","startsWith","endsWith","strings","split","every","str","indexOf","push","isInverted","querySelector","n","isNaN","parseFloat","isFinite","from","to","min","max","Math","itemElements","numbers","num","Number","length","maxNumber","apply","minNumber","isNumeric","currentPage","itemsPerPage","itemsNumber","range","this","isInteger","pagesNumber","ceil","start","end","prevPage","nextPage","halfRange","rangeStart","rangeEnd","SortAction","options","sort","item1","item2","sortByIndex","sortHelper","optionsIndex","result","option","dataType","sortNumbers","order","sortDateTime","dateTimeFormat","sortText","el1","el2","text1","text2","regexExpr","localeCompare","number1","number2","jplistIndex","datetime1","datetime2","date1","date2","getDateFromString","Date","parse","getTime","dateTimeString","year","getDateWildcardValue","day","month","getMonthByWildcard","hour","minute","second","wildcard","datetimeString","regexValue","match","exec","monthNumberOrName","monthIndex","months","findIndex","monthAliasesArray","find","monthAlias","ContentManager","settings","controls","groups","groupName","target","undefined","filters","name","cGroupName","groupValueArr","baseControlsGroups","get","collectControlsOptions","itemsBlock","fragment","getItemsFragment","sortOptions","filter","filterName","splitted","splitByLogic","orOptionsGroupName","handleFilter","and","or","paginationOptions","paginationAction","PaginationAction","bcg","setPaginationOptions","paginatedItems","slice","root","appendChild","sendStateEvent","jump","deepLinking","updateDeepLink","getDeepLink","hashStart","storage","StorageService","set","storageName","cookiesExpiration","filterType","textFilter","pathFilter","rangeFilter","logic","performFilter","orFiltered","Set","temp","Array","orName","top","jumpEl","document","jumpElRect","getBoundingClientRect","width","height","getClientRects","clientTop","body","window","pageYOffset","scroll","stateEvent","CustomEvent","jplistState","baseControlsGroup","element","dispatchEvent","textFilterOptions","pathFilterOptions","rangeFilterOptions","getSortOptions","concat","getTextFilterOptions","getPathFilterOptions","getRangeFilterOptions","getPaginationOptions","createDocumentFragment","deepLink","hashStr","location","hash","href","index","substring","history","replaceState","deeplink","keys","deepLinkParts","dl","join","groupsMap","Map","groupElements","groupElement","getAttribute","groupValue","has","controlInstance","BaseControl","map","control","arr","group","deepLinkParams","DeepLinksService","getUrlParams","deepLinkSavedInStorage","type","jplist","controlTypes","controlClass","controlGroup","addControl","res","findControls","controlsByGroupNames","findControlGroups","groupControls","sameNameControls","findSameNameControls","values","initialHTML","outerHTML","id","BaseDropdownControl","panels","openedClass","panel","initialContent","innerHTML","contents","handlePanelsClick","addEventListener","e","atLeastOnePanelIsOpened","dropdownContent","classList","toggle","contains","add","remove","close","content","BasePathFilterControl","BaseRangeFilterControl","Infinity","BaseTextFilterControl","initialText","value","_text","regex","includeValue","isEqual","BasePaginationControl","disabledClass","selectedClass","BaseSliderControl","isVertical","value1","value2","callback","handler1","createElement","left","handler2","dragging","bind","render","resize","stop","setValues","sendCallback","pos1","getInnerValue","pos2","update","x","y","newStart","newEnd","preventDefault","position","getHandlerPos","abs","handler1ZIndex","getComputedStyle","defaultView","getPropertyValue","handler2ZIndex","style","stopPropagation","setZIndex","handler","rect","size","xy","lefttop","getPreviewValue","rangeHeight","point","touches","pageX","clientX","pageY","clientY","vector","sub","v1","v2","BaseSortControl","multipleSortsNumber","getMultipleSortsNumber","pathsNumber","attributes","attr","nodeName","propIndex","baseSortControl","props","i","k","BaseControlsGroup","BasePathFilterControlsGroup","basePathFilterControl","BaseRangeFilterControlsGroup","baseRangeFilterControl","BaseTextFilterControlsGroup","baseTextFilterControl","SELECTED_CLASS","superclass","checkboxes","radios","baseButtonControl","selected","deepLinkParam","param","key","handleRadios","handleCheckboxes","forEach","cb","isEqualTo","refresh","checked","latestSelectedRadio","radio","getLastSelectedRadio","cbArr","radioArr","combined","baseControl","BasePaginationControlsGroup","basePaginationControl","BaseSortControlsGroup","CounterControl","countValue","format","baseFilterControl","count","getStaticCounterValue","getDynamicCounterValue","getFilteredItems","ButtonsPathFilterControl","checkbox","CheckboxPathFilterControl","DropdownFilterControl","dropdown","buttons","button","setAttribute","btnPathFilterControl","setSelectedButton","getSelectedButton","deepLinkBtn","btn","btnValue","dropdownBtn","setPanelsContent","RadioButtonsPathFilterControl","SelectFilterControl","selectFilterControl","opt","ButtonsRangeFilter","SliderRangeFilter","rangeSliderFilterControl","sliderEl","val1Elements","val2Elements","minElements","maxElements","orientation","parts","slider","round","controlOptions","ButtonsTextFilterControl","CheckboxTextFilterControl","RadioButtonsTextFilterControl","TextboxFilterControl","textChanged","clearButtonID","clearBtn","getElementById","LayoutControl","classNames","selectedClassName","groupClassName","handleSelectedControls","handleClasses","resetAllGroups","getLatestSelectedControl","addClassToGroups","cn","selectedGroupClassName","NoResultsControl","display","PaginationControl","restoreFromDeepLink","pageButtonsHolder","btnTemplate","firstButtons","lastButtons","prevButtons","nextButtons","bindEventHandler","pageButtonClick","itemsPerPageSelects","updateItemsPerPageSelect","itemsPerPageDD","initCustomDropdowns","selectChange","labels","label","template","selects","select","toString","dd","selectedButton","firstChild","removeChild","div","pageButton","setPageAttr","infos","html","info","classesToRemove","className","pageNumber","page","isEnabled","eventName","func","ResetControl","resetControls","ButtonsSortControl","atLeastOneNotSelectedCheckbox","CheckboxSortControl","DropdownSortControl","btnSortControl","HiddenSortControl","RadioButtonsSortControl","SelectSortControl","jPList","Object","assign","splitByGroupAndName","findGroups","controlIndex","oldElement","newElement","parentNode","replaceChild","splice","updateContentFunc","paramsMap","formattedHash","decodeURIComponent","params","currentGroupName","pair","getParam","groupValues","expiration","cValue","encodeURIComponent","exdate","cookie","setMinutes","getMinutes","toUTCString","isSupported","cookies","substr","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","r","Symbol","toStringTag","defineProperty","event","bubbles","cancelable","detail","evt","createEvent","initCustomEvent","prototype","Event","RangeSliderFilter","DropdownControl","init","resetControl","resetContent"],"sourceRoot":""}